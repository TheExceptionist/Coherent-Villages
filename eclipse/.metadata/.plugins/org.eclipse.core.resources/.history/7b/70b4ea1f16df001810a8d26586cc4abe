package net.theexceptionist.coherentvillages.entity.ai;

import net.minecraft.entity.EntityCreature;
import net.minecraft.entity.ai.EntityAIBase;
import net.minecraft.entity.ai.RandomPositionGenerator;
import net.minecraft.pathfinding.Path;
import net.minecraft.pathfinding.PathNavigateGround;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.village.Village;
import net.theexceptionist.coherentvillages.main.entity.EntityHumanVillager;

public class EntityAIPatrolEntireVillage extends EntityAIBase {
	    private final EntityCreature entity;
	    private final double movementSpeed;
	    /** The PathNavigate of our entity. */
	    private Path path;
	    private BlockPos targetPos;
	    private final boolean isNocturnal;
	    
	    public EntityAIPatrolEntireVillage(EntityCreature entityIn, double movementSpeedIn, boolean isNocturnalIn)
	    {
	        this.entity = entityIn;
	        this.movementSpeed = movementSpeedIn;
	        this.isNocturnal = isNocturnalIn;
	        this.setMutexBits(1);

	        if (!(entityIn.getNavigator() instanceof PathNavigateGround))
	        {
	            throw new IllegalArgumentException("Unsupported mob for MoveThroughVillageGoal");
	        }
	    }

	    /**
	     * Returns whether the EntityAIBase should begin execution.
	     */
	    public boolean shouldExecute()
	    {
	    	
	    	System.out.println("Nocturnal: "+this.isNocturnal);
	        if (this.isNocturnal && this.entity.world.isDaytime())
	        {
	            return false;
	        }
	        else
	        {
	            Village village = this.entity.world.getVillageCollection().getNearestVillage(new BlockPos(this.entity), 0);

	            if (village == null)
	            {
	                return false;
	            }
	            else
	            {
	            	BlockPos center = village.getCenter();
	            	int radius = village.getVillageRadius() * 2;
	            	
	            	int targetRadius = this.entity.world.rand.nextInt(radius);
	            	double rad = Math.toRadians(this.entity.world.rand.nextInt(360));
	            	
	            	double x = targetRadius * Math.cos(rad);
	            	double z = targetRadius * Math.sin(rad);
	            	double y = this.entity.world.getTopSolidOrLiquidBlock(new BlockPos(x, 80, z)).getY();
	            	
	            	this.targetPos = center.add(new BlockPos(x, y, z));
	            	
	            	this.path = this.entity.getNavigator().getPathToPos(this.targetPos);
	            	
	            	Vec3d vec3d = RandomPositionGenerator.findRandomTargetBlockTowards(this.entity, 10, 7, new Vec3d((double)this.targetPos.getX(), (double)this.targetPos.getY(), (double)this.targetPos.getZ()));

	            	if(entity instanceof EntityHumanVillager) 
	            	{
	            		EntityHumanVillager patrol = (EntityHumanVillager)entity;
	            		System.out.println(patrol.getTitle()+" - X: "+targetPos.getX()+" Y: "+targetPos.getY()+" Z: "+targetPos.getZ());
	            		System.out.println("Center - X: "+center.getX()+" Y: "+center.getY()+" Z: "+center.getZ());
	            		System.out.println("Radius: "+radius+" Target Radius: "+targetRadius+" Degree:  "+Math.toDegrees(rad));
	            		System.out.println("Path: "+(this.path != null)+" Vec3D: "+(vec3d == null));//targetRadius+" Degree:  "+Math.toDegrees(rad));

	            	}
	            	
	            	
                    if (vec3d == null)
                    {
                        return false;
                    }
                    else
                    {
                        //this.path = this.entity.getNavigator().getPathToXYZ(vec3d.x, vec3d.y, vec3d.z);
                        return this.path != null;
                    }
                    
	            	/*int doorNum = village.getVillageDoorInfoList().size();
	                this.doorInfo = village.getVillageDoorInfoList().get(this.entity.world.rand.nextInt(doorNum));

	                if (this.doorInfo == null)
	                {
	                    return false;
	                }
	                else
	                {
	                    PathNavigateGround pathnavigateground = (PathNavigateGround)this.entity.getNavigator();
	                    boolean flag = pathnavigateground.getEnterDoors();
	                    pathnavigateground.setBreakDoors(false);
	                    this.path = pathnavigateground.getPathToPos(this.doorInfo.getDoorBlockPos());
	                    pathnavigateground.setBreakDoors(flag);

	                    if (this.path != null)
	                    {
	                        return true;
	                    }
	                    else
	                    {
	                        Vec3d vec3d = RandomPositionGenerator.findRandomTargetBlockTowards(this.entity, 10, 7, new Vec3d((double)this.doorInfo.getDoorBlockPos().getX(), (double)this.doorInfo.getDoorBlockPos().getY(), (double)this.doorInfo.getDoorBlockPos().getZ()));

	                        if (vec3d == null)
	                        {
	                            return false;
	                        }
	                        else
	                        {
	                            pathnavigateground.setBreakDoors(false);
	                            this.path = this.entity.getNavigator().getPathToXYZ(vec3d.x, vec3d.y, vec3d.z);
	                            pathnavigateground.setBreakDoors(flag);
	                            return this.path != null;
	                        }
	                    }
	                }*/
	            }
	        }
	    }

	    /**
	     * Returns whether an in-progress EntityAIBase should continue executing
	     */
	    public boolean shouldContinueExecuting()
	    {
	        if (this.entity.getNavigator().noPath())
	        {
	            return false;
	        }
	        else
	        {
	            float f = this.entity.width + 4.0F;
	            return this.entity.getDistanceSq(this.targetPos) > (double)(f * f);
	        }
	    }

	    /**
	     * Execute a one shot task or start executing a continuous task
	     */
	    public void startExecuting()
	    {
	        this.entity.getNavigator().setPath(this.path, this.movementSpeed);
	    }
}
