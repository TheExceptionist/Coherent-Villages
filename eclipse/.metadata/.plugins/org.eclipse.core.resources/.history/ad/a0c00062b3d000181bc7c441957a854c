package net.theexceptionist.coherentvillages.commands;

import java.util.ArrayList;
import java.util.List;

import net.minecraft.command.CommandException;
import net.minecraft.command.ICommand;
import net.minecraft.command.ICommandSender;
import net.minecraft.entity.Entity;
import net.minecraft.server.MinecraftServer;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.text.TextComponentString;
import net.minecraft.world.World;
import net.theexceptionist.coherentvillages.main.entity.EntityHumanVillager;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeRace;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeVocation;

public class CommandCreate implements ICommand{
	private final List aliases;
	
	protected String entityName;
	protected Entity conjuredEntity;
	
	public CommandCreate()
	{
		aliases = new ArrayList<>();
		aliases.add("create");
		aliases.add("crt");
	}

	@Override
	public int compareTo(ICommand o) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return "create";
	}

	@Override
	public String getUsage(ICommandSender sender) {
		// TODO Auto-generated method stub
		return "create <villager_race> <villager_class> <number_to_spawn>\nUsed /create <villager_race> list to list options";
	}

	@Override
	public List<String> getAliases() {
		// TODO Auto-generated method stub
		return this.aliases;
	}

	@Override
	public void execute(MinecraftServer server, ICommandSender sender, String[] args) throws CommandException {
		// TODO Auto-generated method stub
		World world = sender.getEntityWorld(); 
	    
        if (world.isRemote) 
        { 
            //System.out.println("Not processing on Client side"); 
        } 
        else 
        { 
           // System.out.println("Processing on Server side"); 
            if(args.length == 0) 
            { 
                sender.sendMessage(new TextComponentString("Invalid argument\nUsage: "+this.getUsage(sender)+"\nEx: /create nord warrior")); 
                return; 
            } 
            
            AttributeRace race = AttributeRace.getRaceFromString(args[0]);
            
            if(race == null)
            {
            	 sender.sendMessage(new TextComponentString("Invalid Race")); 
                 return;
            }
            
            if(args[1].equals("list"))
            {
            	sender.sendMessage(new TextComponentString(race.listClassNames()));
            }
            else
            {
	            AttributeVocation vocation = race.getVocationFromString(args[1]);
	            
	            EntityHumanVillager villager = null;//new EntityHumanVillager(world, race.getID(), vocation, 0, false);
	            
	            if(vocation != null) 
	            {
	            	sender.sendMessage(new TextComponentString("Creating... " + race.getName() + " " + vocation.getName()));  
	            	villager = new EntityHumanVillager(world, race.getID(), vocation, 0, false);
	            	//System.out.println(x);
	            }         
	            else
	            {
	            	sender.sendMessage(new TextComponentString("Vocation: "+args[1]+" not found or specified")); 
	            	sender.sendMessage(new TextComponentString("Creating... " + race.getName())); 
	            	AttributeVocation job = race.getRandomRecruitVocation();
	            	if(job != null) villager = new EntityHumanVillager(world, race.getID(), job, 0, false);
	            	else sender.sendMessage(new TextComponentString("Couldn't get random job... Try again.")); 
	            }
	            
	            villager.setLocationAndAngles((double)sender.getPosition().getX() + 0.5D, (double)sender.getPosition().getY(), (double)sender.getPosition().getZ() + 0.5D, 0.0F, 0.0F);
	            world.spawnEntity(villager);
	            sender.sendMessage(new TextComponentString("Successfully spawned new "+villager.getRace().getName()+" "+villager.getVocation().getName()+": "+villager.getTitle())); 
            }
       } 
	}

	@Override
	public boolean checkPermission(MinecraftServer server, ICommandSender sender) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public List<String> getTabCompletions(MinecraftServer server, ICommandSender sender, String[] args,
			BlockPos targetPos) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean isUsernameIndex(String[] args, int index) {
		// TODO Auto-generated method stub
		return false;
	}
}
