package net.theexceptionist.coherentvillages.entity.ai;

import net.minecraft.entity.ai.EntityAIBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.MobEffects;
import net.minecraft.init.PotionTypes;
import net.minecraft.init.SoundEvents;
import net.minecraft.potion.PotionType;
import net.minecraft.util.math.BlockPos;
import net.minecraft.village.Village;
import net.theexceptionist.coherentvillages.entity.soldier.AbstractVillagerSoldier;
import net.theexceptionist.coherentvillages.main.entity.IEntityVillager;

public class EntityAIRest extends EntityAIBase
{
    private final IEntityVillager creature;
    private double movePosX;
    private double movePosY;
    private double movePosZ;
    private final boolean restTime;
	private int attackTimer;

    public EntityAIRest(IEntityVillager abstractVillagerSoldier, boolean restInDay)
    {
        this.creature = abstractVillagerSoldier;
        this.restTime = restInDay;
        this.setMutexBits(1);
    }

	/**
     * Returns whether the EntityAIBase should begin execution.
     */
    public boolean shouldExecute()
    {
    	Village village = this.creature.getVillage();
    	
    	if(village != null)
    	{
    		BlockPos pos = village.getCenter();
    		int dist = (int) Math.floor(Math.sqrt(pos.distanceSq(this.creature.getLiving().getPos())));
    		int radius = village.getVillageRadius();
    		
    		//System.out.println(this.creature.getCustomNameTag()+" Supply: "+this.creature.getSupply());
    		
    		if(dist < radius && this.creature.getLiving().world.isDaytime() == restTime && this.creature.getLiving().getHealth() < this.creature.getLiving().getMaxHealth() 
    				&& this.creature.getLiving().getAttackTarget() == null && this.creature.getLiving().getAttackingEntity() == null)
    		{
    			//System.out.println(creature.getCustomNameTag()+" - Executing");
    			//Must be within a village
    			//this.creature.reSupply(this.creature.ge.getKills() * 2);
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
    	else
    	{
    		return false;
    	}
    }

    /**
     * Returns whether an in-progress EntityAIBase should continue executing
     */
    public boolean shouldContinueExecuting()
    {
    	return this.creature.getLiving().getHealth() < this.creature.getLiving().getMaxHealth() 
    			&& this.creature.getLiving().getAttackTarget() == null && this.creature.getLiving().getAttackingEntity() == null;
    }

    /**
     * Execute a one shot task or start executing a continuous task
     */
    public void startExecuting()
    {
    	int type = this.creature.getLiving().world.rand.nextInt(2);
    	PotionType potiontype = null;
        if(this.creature.getLiving().world.rand.nextFloat() < 0.15F && !this.creature.getLiving().isPotionActive(MobEffects.REGENERATION))
        {
        	 potiontype = PotionTypes.REGENERATION;
        	 type = 0;
        }
        else if (this.creature.getLiving().getHealth() < this.creature.getLiving().getMaxHealth())
        {
            potiontype = PotionTypes.HEALING;
            type = 1;
        }

        if(attackTimer > 0)
        {
        	attackTimer--;
        }
        
       /* if (potiontype != null && attackTimer <= 0 && this.creature.getLiving().getSupply() > 0)
        {
        	//ItemStack mainHand = this.creature.getHeldItemMainhand();
           // this.creature.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, PotionUtils.addPotionToItemStack(new ItemStack(Items.POTIONITEM), potiontype));
            this.attackTimer = 5;
            this.creature..world.playSound((EntityPlayer)null, this.creature.posX, this.creature.posY, this.creature.posZ, SoundEvents.ENTITY_WITCH_DRINK, this.creature.getSoundCategory(), 1.0F, 0.8F + this.creature.world.rand.nextFloat() * 0.4F);
            this.creature.setHealth(this.creature.getHealth() + 5);
            this.creature.reSupply(-1);
           // System.out.println(this.creature.getCustomNameTag()+" Healing, Supply: "+this.creature.getSupply());
            
           // this.creature.setHeldItem(EnumHand.MAIN_HAND, mainHand);
        }*/
    }
    
    public void updateTask()
    {
    	startExecuting();
    }
}
