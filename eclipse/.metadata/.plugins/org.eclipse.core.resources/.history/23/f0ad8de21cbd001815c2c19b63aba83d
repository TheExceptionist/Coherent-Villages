package net.theexceptionist.coherentvillages.entity.ai;

import net.minecraft.entity.EntityCreature;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.ai.EntityAITarget;
import net.minecraft.entity.passive.EntityTameable;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.util.math.AxisAlignedBB;

public class EntityAIShareTarget extends EntityAITarget {
	EntityVillager host;
	EntityVillager master;
	
	public EntityAIShareTarget(EntityCreature creature, EntityVillager master, boolean checkSight) {
		super(creature, checkSight);
		this.host = (EntityVillager) creature;
		this.master = master;
		// TODO Auto-generated constructor stub
	}

	@Override
	public boolean shouldExecute() {
		// TODO Auto-generated method stub
		
		if(host.getAttackTarget() != this.master.getAttackTarget()){
			return true;
		}else if(host.getAttackTarget() != this.master.getAttackingEntity()){
			return true;
		}else{
			return false;
		}
	}
	   protected void alertOthers()
	    {
	        double d0 = this.getTargetDistance();

	        for (EntityCreature entitycreature : this.taskOwner.world.getEntitiesWithinAABB(this.taskOwner.getClass(), (new AxisAlignedBB(this.taskOwner.posX, this.taskOwner.posY, this.taskOwner.posZ, this.taskOwner.posX + 1.0D, this.taskOwner.posY + 1.0D, this.taskOwner.posZ + 1.0D)).grow(d0, 10.0D, d0)))
	        {
	            if (this.taskOwner != entitycreature && entitycreature.getAttackTarget() == null && (!(this.taskOwner instanceof EntityTameable) || ((EntityTameable)this.taskOwner).getOwner() == ((EntityTameable)entitycreature).getOwner()) && !entitycreature.isOnSameTeam(this.taskOwner.getRevengeTarget()))
	            {
	                boolean flag = false;

	                for (Class<?> oclass : this.excludedReinforcementTypes)
	                {
	                    if (entitycreature.getClass() == oclass)
	                    {
	                        flag = true;
	                        break;
	                    }
	                }

	                if (!flag)
	                {
	                    this.setEntityAttackTarget(entitycreature, this.taskOwner.getRevengeTarget());
	                }
	            }
	        }
	    }

	    protected void setEntityAttackTarget(EntityCreature creatureIn, EntityLivingBase entityLivingBaseIn)
	    {
	        creatureIn.setAttackTarget(entityLivingBaseIn);
	    }
	

}
