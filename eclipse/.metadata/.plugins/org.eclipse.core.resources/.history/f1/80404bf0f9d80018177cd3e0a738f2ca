package net.theexceptionist.coherentvillages.main.entity.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.boss.EntityDragon;

public class ModelDrachen extends ModelBase
{
    /** The head Model renderer of the dragon */
    private final ModelRenderer head;
    /** The spine Model renderer of the dragon */
    private final ModelRenderer spine;
    /** The jaw Model renderer of the dragon */
    private final ModelRenderer jaw;
    /** The body Model renderer of the dragon */
    private final ModelRenderer body;
    /** The rear leg Model renderer of the dragon */
    private final ModelRenderer rearLeg;
    /** The front leg Model renderer of the dragon */
    private final ModelRenderer frontLeg;
    /** The rear leg tip Model renderer of the dragon */
    private final ModelRenderer rearLegTip;
    /** The front leg tip Model renderer of the dragon */
    private final ModelRenderer frontLegTip;
    /** The rear foot Model renderer of the dragon */
    private final ModelRenderer rearFoot;
    /** The front foot Model renderer of the dragon */
    private final ModelRenderer frontFoot;
    /** The wing Model renderer of the dragon */
    private final ModelRenderer wing;
    /** The wing tip Model renderer of the dragon */
    private final ModelRenderer wingTip;
    private float partialTicks;

    public ModelDrachen(float p_i46360_1_)
    {
        this.textureWidth = 256;
        this.textureHeight = 256;
        this.setTextureOffset("body.body", 0, 0);
        this.setTextureOffset("wing.skin", -56, 88);
        this.setTextureOffset("wingtip.skin", -56, 144);
        this.setTextureOffset("rearleg.main", 0, 0);
        this.setTextureOffset("rearfoot.main", 112, 0);
        this.setTextureOffset("rearlegtip.main", 196, 0);
        this.setTextureOffset("head.upperhead", 112, 30);
        this.setTextureOffset("wing.bone", 112, 88);
        this.setTextureOffset("head.upperlip", 176, 44);
        this.setTextureOffset("jaw.jaw", 176, 65);
        this.setTextureOffset("frontleg.main", 112, 104);
        this.setTextureOffset("wingtip.bone", 112, 136);
        this.setTextureOffset("frontfoot.main", 144, 104);
        this.setTextureOffset("neck.box", 192, 104);
        this.setTextureOffset("frontlegtip.main", 226, 138);
        this.setTextureOffset("body.scale", 220, 53);
        this.setTextureOffset("head.scale", 0, 0);
        this.setTextureOffset("neck.scale", 48, 0);
        this.setTextureOffset("head.nostril", 112, 0);
        float f = -16.0F;
        this.head = new ModelRenderer(this, "head");
        this.head.addBox("upperlip", -6.0F, -1.0F, -24.0F, 12, 5, 16);
        this.head.addBox("upperhead", -8.0F, -8.0F, -10.0F, 16, 16, 16);
        this.head.mirror = true;
        this.head.addBox("scale", -5.0F, -12.0F, -4.0F, 2, 4, 6);
        this.head.addBox("nostril", -5.0F, -3.0F, -22.0F, 2, 2, 4);
        this.head.mirror = false;
        this.head.addBox("scale", 3.0F, -12.0F, -4.0F, 2, 4, 6);
        this.head.addBox("nostril", 3.0F, -3.0F, -22.0F, 2, 2, 4);
        this.jaw = new ModelRenderer(this, "jaw");
        this.jaw.setRotationPoint(0.0F, 4.0F, -8.0F);
        this.jaw.addBox("jaw", -6.0F, 0.0F, -16.0F, 12, 4, 16);
        this.head.addChild(this.jaw);
        this.spine = new ModelRenderer(this, "neck");
        this.spine.addBox("box", -5.0F, -5.0F, -5.0F, 10, 10, 10);
        this.spine.addBox("scale", -1.0F, -9.0F, -3.0F, 2, 4, 6);
        this.body = new ModelRenderer(this, "body");
        this.body.setRotationPoint(0.0F, 4.0F, 8.0F);
        this.body.addBox("body", -12.0F, 0.0F, -16.0F, 24, 24, 64);
        this.body.addBox("scale", -1.0F, -6.0F, -10.0F, 2, 6, 12);
        this.body.addBox("scale", -1.0F, -6.0F, 10.0F, 2, 6, 12);
        this.body.addBox("scale", -1.0F, -6.0F, 30.0F, 2, 6, 12);
        this.wing = new ModelRenderer(this, "wing");
        this.wing.setRotationPoint(-12.0F, 5.0F, 2.0F);
        this.wing.addBox("bone", -56.0F, -4.0F, -4.0F, 56, 8, 8);
        this.wing.addBox("skin", -56.0F, 0.0F, 2.0F, 56, 0, 56);
        this.wingTip = new ModelRenderer(this, "wingtip");
        this.wingTip.setRotationPoint(-56.0F, 0.0F, 0.0F);
        this.wingTip.addBox("bone", -56.0F, -2.0F, -2.0F, 56, 4, 4);
        this.wingTip.addBox("skin", -56.0F, 0.0F, 2.0F, 56, 0, 56);
        this.wing.addChild(this.wingTip);
        this.frontLeg = new ModelRenderer(this, "frontleg");
        this.frontLeg.setRotationPoint(-12.0F, 20.0F, 2.0F);
        this.frontLeg.addBox("main", -4.0F, -4.0F, -4.0F, 8, 24, 8);
        this.frontLegTip = new ModelRenderer(this, "frontlegtip");
        this.frontLegTip.setRotationPoint(0.0F, 20.0F, -1.0F);
        this.frontLegTip.addBox("main", -3.0F, -1.0F, -3.0F, 6, 24, 6);
        this.frontLeg.addChild(this.frontLegTip);
        this.frontFoot = new ModelRenderer(this, "frontfoot");
        this.frontFoot.setRotationPoint(0.0F, 23.0F, 0.0F);
        this.frontFoot.addBox("main", -4.0F, 0.0F, -12.0F, 8, 4, 16);
        this.frontLegTip.addChild(this.frontFoot);
        this.rearLeg = new ModelRenderer(this, "rearleg");
        this.rearLeg.setRotationPoint(-16.0F, 16.0F, 42.0F);
        this.rearLeg.addBox("main", -8.0F, -4.0F, -8.0F, 16, 32, 16);
        this.rearLegTip = new ModelRenderer(this, "rearlegtip");
        this.rearLegTip.setRotationPoint(0.0F, 32.0F, -4.0F);
        this.rearLegTip.addBox("main", -6.0F, -2.0F, 0.0F, 12, 32, 12);
        this.rearLeg.addChild(this.rearLegTip);
        this.rearFoot = new ModelRenderer(this, "rearfoot");
        this.rearFoot.setRotationPoint(0.0F, 31.0F, 4.0F);
        this.rearFoot.addBox("main", -9.0F, 0.0F, -20.0F, 18, 6, 24);
        this.rearLegTip.addChild(this.rearFoot);
    }

    /**
     * Used for easily adding entity-dependent animations. The second and third float params here are the same second
     * and third as in the setRotationAngles method.
     */
    public void setLivingAnimations(EntityLivingBase entitylivingbaseIn, float limbSwing, float limbSwingAmount, float partialTickTime)
    {
        this.partialTicks = partialTickTime;
    }

    /**
     * Sets the models various rotation angles then renders the model.
     */
    public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale)
    {
        GlStateManager.pushMatrix();
        EntityDragon entitydragon = (EntityDragon)entityIn;
        float f = entitydragon.prevAnimTime + (entitydragon.animTime - entitydragon.prevAnimTime) * this.partialTicks;
        this.jaw.rotateAngleX = (float)(Math.sin((double)(f * ((float)Math.PI * 2F))) + 1.0D) * 0.2F;
        float f1 = (float)(Math.sin((double)(f * ((float)Math.PI * 2F) - 1.0F)) + 1.0D);
        f1 = (f1 * f1 + f1 * 2.0F) * 0.05F;
        GlStateManager.translate(0.0F, f1 - 2.0F, -3.0F);
        GlStateManager.rotate(f1 * 2.0F, 1.0F, 0.0F, 0.0F);
        float f2 = -30.0F;
        float f4 = 0.0F;
        float f5 = 1.5F;
        double[] adouble = entitydragon.getMovementOffsets(6, this.partialTicks);
        float f6 = this.updateRotations(entitydragon.getMovementOffsets(5, this.partialTicks)[0] - entitydragon.getMovementOffsets(10, this.partialTicks)[0]);
        float f7 = this.updateRotations(entitydragon.getMovementOffsets(5, this.partialTicks)[0] + (double)(f6 / 2.0F));
        float f8 = f * ((float)Math.PI * 2F);
        f2 = 20.0F;
        float f3 = -12.0F;

        for (int i = 0; i < 5; ++i)
        {
            double[] adouble1 = entitydragon.getMovementOffsets(5 - i, this.partialTicks);
            float f9 = (float)Math.cos((double)((float)i * 0.45F + f8)) * 0.15F;
            this.spine.rotateAngleY = this.updateRotations(adouble1[0] - adouble[0]) * 0.017453292F * 1.5F;
            this.spine.rotateAngleX = f9 + entitydragon.getHeadPartYOffset(i, adouble, adouble1) * 0.017453292F * 1.5F * 5.0F;
            this.spine.rotateAngleZ = -this.updateRotations(adouble1[0] - (double)f7) * 0.017453292F * 1.5F;
            this.spine.rotationPointY = f2;
            this.spine.rotationPointZ = f3;
            this.spine.rotationPointX = f4;
            f2 = (float)((double)f2 + Math.sin((double)this.spine.rotateAngleX) * 10.0D);
            f3 = (float)((double)f3 - Math.cos((double)this.spine.rotateAngleY) * Math.cos((double)this.spine.rotateAngleX) * 10.0D);
            f4 = (float)((double)f4 - Math.sin((double)this.spine.rotateAngleY) * Math.cos((double)this.spine.rotateAngleX) * 10.0D);
            this.spine.render(scale);
        }

        this.head.rotationPointY = f2;
        this.head.rotationPointZ = f3;
        this.head.rotationPointX = f4;
        double[] adouble2 = entitydragon.getMovementOffsets(0, this.partialTicks);
        this.head.rotateAngleY = this.updateRotations(adouble2[0] - adouble[0]) * 0.017453292F;
        this.head.rotateAngleX = this.updateRotations((double)entitydragon.getHeadPartYOffset(6, adouble, adouble2)) * 0.017453292F * 1.5F * 5.0F;
        this.head.rotateAngleZ = -this.updateRotations(adouble2[0] - (double)f7) * 0.017453292F;
        this.head.render(scale);
        GlStateManager.pushMatrix();
        GlStateManager.translate(0.0F, 1.0F, 0.0F);
        GlStateManager.rotate(-f6 * 1.5F, 0.0F, 0.0F, 1.0F);
        GlStateManager.translate(0.0F, -1.0F, 0.0F);
        this.body.rotateAngleZ = 0.0F;
        this.body.render(scale);

        for (int j = 0; j < 2; ++j)
        {
            GlStateManager.enableCull();
            float f11 = f * ((float)Math.PI * 2F);
            this.wing.rotateAngleX = 0.125F - (float)Math.cos((double)f11) * 0.2F;
            this.wing.rotateAngleY = 0.25F;
            this.wing.rotateAngleZ = (float)(Math.sin((double)f11) + 0.125D) * 0.8F;
            this.wingTip.rotateAngleZ = -((float)(Math.sin((double)(f11 + 2.0F)) + 0.5D)) * 0.75F;
            this.rearLeg.rotateAngleX = 1.0F + f1 * 0.1F;
            this.rearLegTip.rotateAngleX = 0.5F + f1 * 0.1F;
            this.rearFoot.rotateAngleX = 0.75F + f1 * 0.1F;
            this.frontLeg.rotateAngleX = 1.3F + f1 * 0.1F;
            this.frontLegTip.rotateAngleX = -0.5F - f1 * 0.1F;
            this.frontFoot.rotateAngleX = 0.75F + f1 * 0.1F;
            this.wing.render(scale);
            this.frontLeg.render(scale);
            this.rearLeg.render(scale);
            GlStateManager.scale(-1.0F, 1.0F, 1.0F);

            if (j == 0)
            {
                GlStateManager.cullFace(GlStateManager.CullFace.FRONT);
            }
        }

        GlStateManager.popMatrix();
        GlStateManager.cullFace(GlStateManager.CullFace.BACK);
        GlStateManager.disableCull();
        float f10 = -((float)Math.sin((double)(f * ((float)Math.PI * 2F)))) * 0.0F;
        f8 = f * ((float)Math.PI * 2F);
        f2 = 10.0F;
        f3 = 60.0F;
        f4 = 0.0F;
        adouble = entitydragon.getMovementOffsets(11, this.partialTicks);

        for (int k = 0; k < 12; ++k)
        {
            adouble2 = entitydragon.getMovementOffsets(12 + k, this.partialTicks);
            f10 = (float)((double)f10 + Math.sin((double)((float)k * 0.45F + f8)) * 0.05000000074505806D);
            this.spine.rotateAngleY = (this.updateRotations(adouble2[0] - adouble[0]) * 1.5F + 180.0F) * 0.017453292F;
            this.spine.rotateAngleX = f10 + (float)(adouble2[1] - adouble[1]) * 0.017453292F * 1.5F * 5.0F;
            this.spine.rotateAngleZ = this.updateRotations(adouble2[0] - (double)f7) * 0.017453292F * 1.5F;
            this.spine.rotationPointY = f2;
            this.spine.rotationPointZ = f3;
            this.spine.rotationPointX = f4;
            f2 = (float)((double)f2 + Math.sin((double)this.spine.rotateAngleX) * 10.0D);
            f3 = (float)((double)f3 - Math.cos((double)this.spine.rotateAngleY) * Math.cos((double)this.spine.rotateAngleX) * 10.0D);
            f4 = (float)((double)f4 - Math.sin((double)this.spine.rotateAngleY) * Math.cos((double)this.spine.rotateAngleX) * 10.0D);
            this.spine.render(scale);
        }

        GlStateManager.popMatrix();
    }

    /**
     * Updates the rotations in the parameters for rotations greater than 180 degrees or less than -180 degrees. It adds
     * or subtracts 360 degrees, so that the appearance is the same, although the numbers are then simplified to range -
     * 180 to 180
     */
    private float updateRotations(double p_78214_1_)
    {
        while (p_78214_1_ >= 180.0D)
        {
            p_78214_1_ -= 360.0D;
        }

        while (p_78214_1_ < -180.0D)
        {
            p_78214_1_ += 360.0D;
        }

        return (float)p_78214_1_;
    }
	
	/*ModelRenderer body;
	ModelRenderer thigh1;
	ModelRenderer leg1;
	ModelRenderer foot1;
	
	//Leg 2
	ModelRenderer thigh2;
	ModelRenderer leg2;
	ModelRenderer foot2;
	
	//Leg 3
	ModelRenderer thigh3;
	ModelRenderer leg3;
	ModelRenderer foot3;
	
	//Leg 4
	ModelRenderer thigh4;
	ModelRenderer leg4;
	ModelRenderer foot4;
	
	//Neck Pieces
	ModelRenderer neck1;
	ModelRenderer neck2;
	ModelRenderer head1;
	ModelRenderer eyes1;
	ModelRenderer ear1;
	ModelRenderer ear2;
	ModelRenderer lips1;
	ModelRenderer lips2;
	
	//Tail Piece
	ModelRenderer tail1;
	ModelRenderer tail2;
	ModelRenderer tail3;
	ModelRenderer tail4;
	ModelRenderer tail5;
	
	//Wing Piece
	ModelRenderer wingL1;
	ModelRenderer wingL2;
	ModelRenderer wingL3;
	ModelRenderer wingL4;
	ModelRenderer wingL5;
	
	//Wing Piece R
	ModelRenderer wingR1;
	ModelRenderer wingR2;
	ModelRenderer wingR3;
	ModelRenderer wingR4;
	ModelRenderer wingR5;
	
	public ModelDrachen()
	{
		this.textureWidth = 256;
		this.textureHeight = 256;
		
		this.body = new ModelRenderer(this, 0, 128);
		this.body.addBox(-24, -16, -32, 48, 26, 64, 0);
		this.body.setRotationPoint(0, 0, 0);
		
		//Wing
		this.wingL1 = new ModelRenderer(this, 0, 86);
		this.wingL1.addBox(0, 0, -16, 16, 4, 32, 0);
		this.wingL1.setRotationPoint(24, -16, 0);
		this.setRotateAngle(wingL1, 0.0F, 0.0F, 0.0F);
		this.body.addChild(wingL1);
		
		this.wingL2 = new ModelRenderer(this, 0, 86);
		this.wingL2.addBox(0, 0, -16, 16, 4, 32, 0);
		this.wingL2.setRotationPoint(16, 0, 0);
		this.setRotateAngle(wingL2, 0.0F, 0.0F, 0.0F);
		this.wingL1.addChild(wingL2);
		
		this.wingL3 = new ModelRenderer(this, 0, 86);
		this.wingL3.addBox(0, 0, -16, 16, 4, 32, 0);
		this.wingL3.setRotationPoint(16, 0, 0);
		this.setRotateAngle(wingL3, 0.0F, 0.0F, 0.0F);
		this.wingL2.addChild(wingL3);
		
		this.wingL4 = new ModelRenderer(this, 0, 86);
		this.wingL4.addBox(0, 0, -16, 16, 4, 32, 0);
		this.wingL4.setRotationPoint(16, 0, 0);
		this.setRotateAngle(wingL4, 0.0F, 0.0F, 0.0F);
		this.wingL3.addChild(wingL4);
		
		this.wingL5 = new ModelRenderer(this, 0, 86);
		this.wingL5.addBox(0, 0, -16, 16, 4, 32, 0);
		this.wingL5.setRotationPoint(16, 0, 0);
		this.setRotateAngle(wingL5, 0.0F, 0.0F, 0.0F);
		this.wingL4.addChild(wingL5);
				
				//Wing
		this.wingR1 = new ModelRenderer(this, 0, 86);
		this.wingR1.addBox(-16, 0, -16, 16, 4, 32, 0);
		this.wingR1.setRotationPoint(-26, -16, 0);
		this.wingR1.mirror = true;
		this.setRotateAngle(wingR1, 0.0F, 0.0F, 0.0F);
		this.body.addChild(wingR1);
		
		this.wingR2 = new ModelRenderer(this, 0, 86);
		this.wingR2.addBox(-16, 0, -16, 16, 4, 32, 0);
		this.wingR2.setRotationPoint(-16, -0, 0);
		this.wingR2.mirror = true;
		this.setRotateAngle(wingR2, 0.0F, 0.0F, 0.0F);
		this.wingR1.addChild(wingR2);
		
		this.wingR3 = new ModelRenderer(this, 0, 86);
		this.wingR3.addBox(-16, 0, -16, 16, 4, 32, 0);
		this.wingR3.setRotationPoint(-16, -0, 0);
		this.wingR3.mirror = true;
		this.setRotateAngle(wingR3, 0.0F, 0.0F, 0.0F);
		this.wingR2.addChild(wingR3);
		
		this.wingR4 = new ModelRenderer(this, 0, 86);
		this.wingR4.addBox(-16, 0, -16, 16, 4, 32, 0);
		this.wingR4.setRotationPoint(-16, -0, 0);
		this.wingR4.mirror = true;
		this.setRotateAngle(wingR4, 0.0F, 0.0F, 0.0F);
		this.wingR3.addChild(wingR4);
		
		this.wingR5 = new ModelRenderer(this, 0, 86);
		this.wingR5.addBox(-16, 0, -16, 16, 4, 32, 0);
		this.wingR5.setRotationPoint(-16, -0, 0);
		this.wingR5.mirror = true;
		this.setRotateAngle(wingR5, 0.0F, 0.0F, 0.0F);
		this.wingR4.addChild(wingR5);
		
		//Neck
		this.neck1 = new ModelRenderer(this, 128, 0);
		this.neck1.addBox(-12, -12, -8, 24, 16, 8, 0);
		this.neck1.setRotationPoint(-0, -0, -32);
		this.setRotateAngle(neck1, 0.0F, 0.0F, 0.0F);
		this.body.addChild(neck1);
		
		this.neck2 = new ModelRenderer(this, 128, 64);
		this.neck2.addBox(-9, -8, -16, 18, 12, 16, 0);
		this.neck2.setRotationPoint(0, 0, -8);
		this.setRotateAngle(neck2, 0.0F, 0.0F, 0.0F);
		this.neck1.addChild(neck2);
		
		this.head1 = new ModelRenderer(this, 200, 0);
		this.head1.addBox(-4, -4, -16, 9, 10, 16, 0);
		this.head1.setRotationPoint(0, 0, -16);
		this.setRotateAngle(head1, 0.0F, 0.0F, 0.0F);
		this.neck2.addChild(head1);
		
		this.eyes1 = new ModelRenderer(this, 200, 32);
		this.eyes1.addBox(-4.5f, -4, 0, 9, 8, 4, 0);
		this.eyes1.setRotationPoint(0, -4, -4);
		this.setRotateAngle(eyes1, 0.0F, 0.0F, 0.0F);
		this.head1.addChild(eyes1);
		
		this.ear1 = new ModelRenderer(this, 200, 48);
		this.ear1.addBox(0, 0, -2, 4, 4, 4, 0);
		this.ear1.setRotationPoint(4, -4, 2);
		this.setRotateAngle(ear1, degreeToRad(52.17), degreeToRad(-39.12), 0.0F);
		this.eyes1.addChild(ear1);
		
		this.ear2 = new ModelRenderer(this, 200, 48);
		this.ear2.addBox(-4, 2, 0, 4, 4, 4, 0);
		this.ear2.setRotationPoint(-4, -4, 0);
		this.setRotateAngle(ear2, degreeToRad(52.17), degreeToRad(39.13), 0.0F);
		this.eyes1.addChild(ear2);
		
		this.lips1 = new ModelRenderer(this, 200, 64);
		this.lips1.addBox(-4.5f, -4, -4, 9, 2, 4, 0);
		this.lips1.setRotationPoint(0, 6, -16);
		this.setRotateAngle(lips1, 0.0F, 0.0F, 0.0F);
		this.head1.addChild(lips1);
		
		this.lips2 = new ModelRenderer(this, 200, 64);
		this.lips2.addBox(-4.5f, -2, -4, 9, 2, 4, 0);
		this.lips2.setRotationPoint(0, 6, -16);
		this.setRotateAngle(lips2, 0.0F, 0.0F, 0.0F);
		this.head1.addChild(lips2);
		
		
		//Tail
		this.tail1 = new ModelRenderer(this, 128, 32);
		this.tail1.addBox(-12, -12, 0, 24, 16, 8, 0);
		this.tail1.setRotationPoint(0, 0, 32);
		this.setRotateAngle(tail1, 0.0F, 0.0F, 0.0F);
		this.body.addChild(tail1);
		
		this.tail2 = new ModelRenderer(this, 128, 32);
		this.tail2.addBox(-12, -12, 0, 24, 16, 8, 0);
		this.tail2.setRotationPoint(0, 0, 8);
		this.setRotateAngle(tail2, 0.0F, 0.0F, 0.0F);
		this.tail1.addChild(tail2);
		
		this.tail3 = new ModelRenderer(this, 128, 32);
		this.tail3.addBox(-12, -12, 0, 24, 16, 8, 0);
		this.tail3.setRotationPoint(0, 0, 8);
		this.setRotateAngle(tail3, 0.0F, 0.0F, 0.0F);
		this.tail2.addChild(tail3);
		
		this.tail4 = new ModelRenderer(this, 128, 32);
		this.tail4.addBox(-12, -12, 0, 24, 16, 8, 0);
		this.tail4.setRotationPoint(0, 0, 8);
		this.setRotateAngle(tail4, 0.0F, 0.0F, 0.0F);
		this.tail3.addChild(tail4);
		
		this.tail5 = new ModelRenderer(this, 128, 32);
		this.tail5.addBox(-12, -12, 0, 24, 16, 8, 0);
		this.tail5.setRotationPoint(0, 0, 8);
		this.setRotateAngle(tail5, 0.0F, 0.0F, 0.0F);
		this.tail4.addChild(tail5);
		
		//Leg 
		this.thigh1 = new ModelRenderer(this, 0, 0);
		this.thigh1.addBox(0, 0, -4, 8, 16, 8, 0);
		this.thigh1.setRotationPoint(20, 10, -12);
		this.setRotateAngle(thigh1, degreeToRad(41.74), 0.0F, 0.0F);
		this.body.addChild(thigh1);
		
		this.leg1 = new ModelRenderer(this, 0, 36);
		this.leg1.addBox(-4, 0, 2, 8, 16, 8, 0);
		this.leg1.setRotationPoint(4, 10, 2);
		this.setRotateAngle(leg1, degreeToRad(-91.09), 0.0F, 0.0F);
		this.thigh1.addChild(leg1);
		
		this.foot1 = new ModelRenderer(this, 64, 0);
		this.foot1.addBox(-4, 0, 2, 8, 8, 4, 0);
		this.foot1.setRotationPoint(0, 13.7f, 4);
		this.setRotateAngle(foot1, degreeToRad(-18.26), 0.0F, 0.0F);
		this.leg1.addChild(foot1);
		
		//Leg 2
		this.thigh2 = new ModelRenderer(this, 0, 0);
		this.thigh2.addBox(-4, 0, -4, 8, 16, 8, 0);
		this.thigh2.setRotationPoint(-24, 10, -12);
		this.setRotateAngle(thigh2, degreeToRad(41.74), 0.0F, 0.0F);
		this.body.addChild(thigh2);
		
		this.leg2 = new ModelRenderer(this, 0, 36);
		this.leg2.addBox(-4, 0, 2, 8, 16, 8, 0);
		this.leg2.setRotationPoint(0, 10, 2);
		this.setRotateAngle(leg2, degreeToRad(-91.09), 0.0F, 0.0F);
		this.thigh2.addChild(leg2);
		
		this.foot2 = new ModelRenderer(this, 64, 0);
		this.foot2.addBox(-4, 0, 2, 8, 8, 4, 0);
		this.foot2.setRotationPoint(0, 13.7f, 4);
		this.setRotateAngle(foot2, degreeToRad(-18.26), 0.0F, 0.0F);
		this.leg2.addChild(foot2);
		
		//Leg 3
		this.thigh3 = new ModelRenderer(this, 0, 0);
		this.thigh3.addBox(0, 0, -4, 8, 16, 16, 0);
		this.thigh3.setRotationPoint(20, 10, 16);
		this.setRotateAngle(thigh3, degreeToRad(41.74), degreeToRad(-20), 0.0F);
		this.body.addChild(thigh3);
		
		this.leg3 = new ModelRenderer(this, 0, 36);
		this.leg3.addBox(-4, 0, 2, 8, 16, 8, 0);
		this.leg3.setRotationPoint(4, 10, 2);
		this.setRotateAngle(leg3, degreeToRad(-91.09), 0.0F, 0.0F);
		this.thigh3.addChild(leg3);
		
		this.foot3 = new ModelRenderer(this, 64, 0);
		this.foot3.addBox(-4, 0, 2, 8, 8, 4, 0);
		this.foot3.setRotationPoint(0, 13.7f, 4);
		this.setRotateAngle(foot3, degreeToRad(-18.26), 0.0F, 0.0F);
		this.leg3.addChild(foot3);
		
		//Leg 4
		this.thigh4 = new ModelRenderer(this, 0, 0);
		this.thigh4.addBox(-4, 0, -4, 8, 16, 16, 0);
		this.thigh4.setRotationPoint(-24, 10, 16);
		this.setRotateAngle(thigh4, degreeToRad(41.74), degreeToRad(20), 0.0F);
		this.body.addChild(thigh4);
		
		this.leg4 = new ModelRenderer(this, 0, 36);
		this.leg4.addBox(-4, 0, 2, 8, 16, 8, 0);
		this.leg4.setRotationPoint(4, 10, 2);
		this.setRotateAngle(leg4, degreeToRad(-91.09), 0.0F, 0.0F);
		this.thigh4.addChild(leg4);
		
		this.foot4 = new ModelRenderer(this, 64, 0);
		this.foot4.addBox(-4, 0, 2, 8, 8, 4, 0);
		this.foot4.setRotationPoint(0, 13.7f, 4);
		this.setRotateAngle(foot4, degreeToRad(-18.26), 0.0F, 0.0F);
		this.leg4.addChild(foot4);
	}
	
	
    public void setRotateAngle(ModelRenderer modelRenderer, float x, float y, float z) {
        modelRenderer.rotateAngleX = x;
        modelRenderer.rotateAngleY = y;
        modelRenderer.rotateAngleZ = z;
    }


	public void render(Entity entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale)
	 {
	     this.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entityIn);
		 GlStateManager.pushMatrix();

	     this.body.render(scale);
	     this.thigh1.render(scale);
	     this.leg1.render(scale);
	     this.foot1.render(scale);
	     
	     this.thigh2.render(scale);
	     this.leg2.render(scale);
	     this.foot2.render(scale);
	     
	     this.thigh3.render(scale);
	     this.leg3.render(scale);
	     this.foot3.render(scale);
	     
	     this.thigh4.render(scale);
	     this.leg4.render(scale);
	     this.foot4.render(scale);
	     
	     this.neck1.render(scale);
	     this.neck2.render(scale);
	     
	     this.head1.render(scale);
	     
	     this.tail1.render(scale);

	      //  this.leftArm.render(scale);
	       // this.rightArm.render(scale);

	     GlStateManager.popMatrix();
	 }
	 
	 public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scaleFactor, Entity entityIn)
	 {
		 //float f2 =  (float) -(Math.PI / 1.5);
		this.setRotateAngle(this.wingL1, degreeToRad(-20), 0, degreeToRad(-41));
		this.setRotateAngle(this.wingL2, degreeToRad(0), 0, degreeToRad(23.48));
		this.setRotateAngle(this.wingL3, degreeToRad(0), 0, degreeToRad(20.87));
		this.setRotateAngle(this.wingL4, degreeToRad(0), 0, degreeToRad(52));
		this.setRotateAngle(this.wingL5, degreeToRad(7.83), degreeToRad(2.61), 0);
		
		this.setRotateAngle(this.wingR1, degreeToRad(20), 0, degreeToRad(41));
		this.setRotateAngle(this.wingR2, degreeToRad(0), 0, degreeToRad(-23.48));
		this.setRotateAngle(this.wingR3, degreeToRad(0), 0, degreeToRad(-20.87));
		this.setRotateAngle(this.wingR4, degreeToRad(0), 0, degreeToRad(-52));
		this.setRotateAngle(this.wingR5, degreeToRad(-7.83), degreeToRad(-2.61), 0);
	 }
	 
	 public float degreeToRad(double angle)
	 {
		 double rad = angle;
		 if(rad < 0) rad = 360 + rad;
		return (float) (rad * (Math.PI / 180));
	 }*/
}
