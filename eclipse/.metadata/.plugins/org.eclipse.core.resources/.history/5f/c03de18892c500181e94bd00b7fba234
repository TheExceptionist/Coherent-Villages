package net.theexceptionist.coherentvillages.worldgen;

import java.util.List;
import java.util.Random;

import com.google.common.collect.Lists;

import net.minecraft.block.BlockStairs;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.IEntityLivingData;
import net.minecraft.init.Biomes;
import net.minecraft.init.Blocks;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.biome.Biome;
import net.minecraft.world.biome.BiomeDesert;
import net.minecraft.world.biome.BiomeProvider;
import net.minecraft.world.biome.BiomeSavanna;
import net.minecraft.world.biome.BiomeTaiga;
import net.minecraft.world.gen.structure.StructureBoundingBox;
import net.minecraft.world.gen.structure.StructureComponent;
import net.minecraft.world.gen.structure.StructureVillagePieces;
import net.theexceptionist.coherentvillages.entity.soldier.AbstractVillagerSoldier;
import net.theexceptionist.coherentvillages.entity.soldier.EntityVillagerGuard;
import net.theexceptionist.coherentvillages.entity.soldier.EntityVillagerManAtArms;
import net.theexceptionist.coherentvillages.entity.soldier.EntityVillagerMilitia;
import net.theexceptionist.coherentvillages.entity.soldier.EntityVillagerSergeant;
import net.theexceptionist.coherentvillages.entity.soldier.EntityVillagerWarrior;

public class VillageComponentStart extends StructureVillagePieces.Start
{
    public BiomeProvider biomeProvider;
    /** World terrain type, 0 for normal, 1 for flap map */
    public int terrainType;
    public StructureVillagePieces.PieceWeight lastPlaced;
    /**
     * Contains List of all spawnable Structure Piece Weights. If no more Pieces of a type can be spawned, they
     * are removed from this list
     */
    public List<StructureVillagePieces.PieceWeight> structureVillageWeightedPieceList;
    public List<StructureComponent> pendingHouses = Lists.<StructureComponent>newArrayList();
    public List<StructureComponent> pendingRoads = Lists.<StructureComponent>newArrayList();
    public Biome biome;

    public VillageComponentStart()
    {
    }

    public VillageComponentStart(BiomeProvider biomeProviderIn, int p_i2104_2_, Random rand, int p_i2104_4_, int p_i2104_5_, List<StructureVillagePieces.PieceWeight> p_i2104_6_, int p_i2104_7_)
    {
    	super(biomeProviderIn, 0, rand, p_i2104_4_, p_i2104_5_, p_i2104_6_, p_i2104_7_);
        this.biomeProvider = biomeProviderIn;
        this.structureVillageWeightedPieceList = p_i2104_6_;
        this.terrainType = p_i2104_7_;
        Biome biome = biomeProviderIn.getBiome(new BlockPos(p_i2104_4_, 0, p_i2104_5_), Biomes.DEFAULT);
        this.biome = biome;
        this.startPiece = this;

        if (biome instanceof BiomeDesert)
        {
            this.structureType = 1;
        }
        else if (biome instanceof BiomeSavanna)
        {
            this.structureType = 2;
        }
        else if (biome instanceof BiomeTaiga)
        {
            this.structureType = 3;
        }

        this.setStructureType(this.structureType);
        this.isZombieInfested = rand.nextInt(50) == 0;
    }
}
