package net.theexceptionist.coherentvillages.main.entity;

import java.util.Random;

import javax.annotation.Nullable;

import com.google.common.base.Predicate;

import net.minecraft.enchantment.EnchantmentHelper;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.IRangedAttackMob;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAIAttackMelee;
import net.minecraft.entity.ai.EntityAIAttackRanged;
import net.minecraft.entity.ai.EntityAIAvoidEntity;
import net.minecraft.entity.ai.EntityAIFollowGolem;
import net.minecraft.entity.ai.EntityAILookAtTradePlayer;
import net.minecraft.entity.ai.EntityAILookIdle;
import net.minecraft.entity.ai.EntityAIMoveIndoors;
import net.minecraft.entity.ai.EntityAIMoveThroughVillage;
import net.minecraft.entity.ai.EntityAIMoveTowardsRestriction;
import net.minecraft.entity.ai.EntityAIMoveTowardsTarget;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAIOpenDoor;
import net.minecraft.entity.ai.EntityAIRestrictOpenDoor;
import net.minecraft.entity.ai.EntityAISwimming;
import net.minecraft.entity.ai.EntityAITradePlayer;
import net.minecraft.entity.ai.EntityAIVillagerInteract;
import net.minecraft.entity.ai.EntityAIVillagerMate;
import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
import net.minecraft.entity.ai.EntityAIWatchClosest;
import net.minecraft.entity.ai.EntityAIWatchClosest2;
import net.minecraft.entity.monster.EntityCreeper;
import net.minecraft.entity.monster.EntityEvoker;
import net.minecraft.entity.monster.EntityVex;
import net.minecraft.entity.monster.EntityVindicator;
import net.minecraft.entity.monster.EntityZombie;
import net.minecraft.entity.monster.IMob;
import net.minecraft.entity.passive.EntityTameable;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.EntityEquipmentSlot;
import net.minecraft.item.ItemAxe;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.DamageSource;
import net.minecraft.util.EnumHand;
import net.minecraft.util.EnumParticleTypes;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.village.Village;
import net.minecraft.world.World;
import net.minecraft.world.WorldServer;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIAttackBackExclude;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIAttackWithMagic;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIHealAllies;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIHideFromHarm;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIStayInBorders;
import net.theexceptionist.coherentvillages.entity.followers.EntitySkeletonMinion;
import net.theexceptionist.coherentvillages.entity.followers.IEntityFollower;
import net.theexceptionist.coherentvillages.entity.soldier.AbstractVillagerSoldier;
import net.theexceptionist.coherentvillages.main.Main;
import net.theexceptionist.coherentvillages.main.NameGenerator;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeFaction;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeRace;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeVocation;

public class EntityHumanVillager extends EntityVillager implements IEntityFollower, IEntityVillager, IRangedAttackMob{
	protected String firstName, lastName;
	protected int gender = -1;
	protected AttributeRace race;
	protected AttributeFaction faction;
	protected AttributeVocation vocation;
	protected Village village;
	private ResourceLocation skin;
	
	private EntityAIAttackMelee melee;
	private EntityAIAttackRanged ranged;
	
	private int homeCheckTimer = 0;
	private EntityAIHealAllies heal;
	private EntityAIAttackRanged potions;
	private EntityAIAttackWithMagic spells;
	private int swingProgressTicks;
	private boolean isSwinging = false;
	
	public final static int GENDER_MALE = 0;
	public final static int GENDER_FEMALE = 1;
	
	public static int END_ID = 0;

	public EntityHumanVillager(World worldIn) {
		this(worldIn, END_ID++);
	}
	
	public EntityHumanVillager(World worldIn, final int ID)
	{
		super(worldIn);
		
		this.race = AttributeRace.getFromIDRace((ID/2) % AttributeRace.races.size());
		this.gender = (ID/2) % (GENDER_FEMALE + 1);

		this.initEntityClass();
		this.initEntityCharacteristics();
		this.initEntityAI();
		this.applyEquipment();
		this.applyAttributes();
		
		this.initEntityName();
	}
	
	protected void applyAttributes()
    {
		int healthBonus = race.getHealthBonus();
		int attackBonus = race.getAttackBonus();
		int detectBonus = race.getDetectBonus();
		int speedBonus = race.getSpeedBonus();
		int knockbackBonus = race.getKnockbackBonus();
		
        getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(20.0D + (healthBonus * vocation.getRank(1)));
        getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D + ((speedBonus * vocation.getRank(1))/10));
        getEntityAttribute(SharedMonsterAttributes.KNOCKBACK_RESISTANCE).setBaseValue((knockbackBonus * vocation.getRank(1))/10);
        getEntityAttribute(SharedMonsterAttributes.ARMOR).setBaseValue(0.2D);
        getEntityAttribute(SharedMonsterAttributes.ARMOR_TOUGHNESS).setBaseValue(32.0D);
        getEntityAttribute(SharedMonsterAttributes.FOLLOW_RANGE).setBaseValue(16.0D + (detectBonus * vocation.getRank(1)));
        getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).setBaseValue(4.0D + (attackBonus * vocation.getRank(1)));
        
        this.setHealth((float) getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).getBaseValue());
    }
	
	public boolean attackEntityAsMob(Entity entityIn)
    {
        float f = (float)this.getEntityAttribute(SharedMonsterAttributes.ATTACK_DAMAGE).getAttributeValue();
        int i = 0;

        if (entityIn instanceof EntityLivingBase)
        {
            f += EnchantmentHelper.getModifierForCreature(this.getHeldItemMainhand(), ((EntityLivingBase)entityIn).getCreatureAttribute());
            i += EnchantmentHelper.getKnockbackModifier(this);
        }

        boolean flag = entityIn.attackEntityFrom(DamageSource.causeMobDamage(this), f);
        this.limbSwing = 5;
        
        if (flag)
        {
            if (i > 0 && entityIn instanceof EntityLivingBase)
            {
                ((EntityLivingBase)entityIn).knockBack(this, (float)i * 0.5F, (double)MathHelper.sin(this.rotationYaw * 0.017453292F), (double)(-MathHelper.cos(this.rotationYaw * 0.017453292F)));
                this.motionX *= 0.6D;
                this.motionZ *= 0.6D;
                this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_PLAYER_ATTACK_SWEEP, this.getSoundCategory(), 1.0F, 1.0F);
                ((WorldServer)this.world).spawnParticle(EnumParticleTypes.DAMAGE_INDICATOR, entityIn.posX, entityIn.posY + (double)(entityIn.height * 0.5F), entityIn.posZ, (int)f, 0.1D, 0.0D, 0.1D, 0.2D);
            }

            int j = EnchantmentHelper.getFireAspectModifier(this);

            if (j > 0)
            {
                entityIn.setFire(j * 4);
            }

            if (entityIn instanceof EntityPlayer)
            {
                EntityPlayer entityplayer = (EntityPlayer)entityIn;
                ItemStack itemstack = this.getHeldItemMainhand();
                ItemStack itemstack1 = entityplayer.isHandActive() ? entityplayer.getActiveItemStack() : ItemStack.EMPTY;

                if (!itemstack.isEmpty() && !itemstack1.isEmpty() && itemstack.getItem().canDisableShield(itemstack, itemstack1, entityplayer, this) && itemstack1.getItem().isShield(itemstack1, entityplayer))
                {
                    float f1 = 0.25F + (float)EnchantmentHelper.getEfficiencyModifier(this) * 0.05F;

                    if (this.rand.nextFloat() < f1)
                    {
                        entityplayer.getCooldownTracker().setCooldown(itemstack1.getItem(), 100);
                        this.world.setEntityState(entityplayer, (byte)30);
                    }
                }
            }

            this.applyEnchantments(this, entityIn);
        }

        return flag;
    }
	
	protected void updateAITasks()
    {
	
	 super.updateAITasks();
	 
	 if (--this.homeCheckTimer  <= 0)
        {
            this.homeCheckTimer = 70 + this.rand.nextInt(50);
            this.village = this.world.getVillageCollection().getNearestVillage(new BlockPos(this), 32);

            if (this.village == null)
            {
                this.detachHome();
            }
            else
            {
                BlockPos blockpos = this.village.getCenter();
                this.setHomePosAndDistance(blockpos, (int)((float)this.village.getVillageRadius() * 0.6F));
            }
        }
	
	 if((this.getAttackTarget() != null || this.getAttackingEntity() != null) && !this.isSprinting())
	 {
		 this.setSprinting(true);
		 //System.out.println("Sprinting! To: "+(this.getAttackTarget() != null || this.getAttackingEntity() != null));
	 }
	 else if (this.isSprinting())
	 {
		 this.setSprinting(false);
		 //System.out.println("Not Sprinting");
	 }
    }
 

	
	@Override
	protected void initEntityAI()
	{
		if(vocation == null) return;
		melee = new EntityAIAttackMelee(this, 1.0D, true);
		ranged = new EntityAIAttackRanged(this, 1.0D, 60, 60.0F);
		//heal = new EntityAIHealAllies(this, 1.0D, 60, 10.0F, EntityVillager.class);
        potions = new EntityAIAttackRanged(this, 1.0D, 60, 10.0F);
        spells =  new  EntityAIAttackWithMagic(this, 1.0D, 20, 15.0F);
		
		switch(vocation.getType())
		{
			case AttributeVocation.CLASS_SOLDIER:
			{
				this.tasks.addTask(0, new EntityAISwimming(this));
		        this.tasks.addTask(1, melee);
		        this.tasks.addTask(2, new EntityAIStayInBorders(this, 1.0D));
		        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(4, new EntityAIRestrictOpenDoor(this));
		        this.tasks.addTask(5, new EntityAIOpenDoor(this, true));
		       // this.tasks.addTask(6, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(7, new EntityAIHideFromHarm(this));
		        this.tasks.addTask(8, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
		        this.tasks.addTask(9, new EntityAIWanderAvoidWater(this, 0.6D));
		        this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
		        this.tasks.addTask(11, new EntityAILookIdle(this));
		        
		        this.targetTasks.addTask(0, new EntityAINearestAttackableTarget(this, EntityLiving.class, 1, true, true, new Predicate<EntityLiving>()
		        {
		            public boolean apply(@Nullable EntityLiving p_apply_1_)
		            {
		        		return p_apply_1_ != null && (IMob.VISIBLE_MOB_SELECTOR.apply(p_apply_1_) && !(p_apply_1_ instanceof EntityCreeper) && !(p_apply_1_ instanceof EntityTameable) && !(p_apply_1_ instanceof EntitySkeletonMinion));
		            }
		        }));
		        this.targetTasks.addTask(1, new EntityAIAttackBackExclude(this, true, new Class[0])); 
			}
			break;
			case AttributeVocation.CLASS_ARCHER:
			{
				this.tasks.addTask(0, new EntityAISwimming(this));
		        this.tasks.addTask(1, ranged);
		        this.tasks.addTask(2, new EntityAIStayInBorders(this, 1.0D));
		        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(4, new EntityAIRestrictOpenDoor(this));
		        this.tasks.addTask(5, new EntityAIOpenDoor(this, true));
		      //  this.tasks.addTask(6, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(7, new EntityAIHideFromHarm(this));
		        this.tasks.addTask(8, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
		        this.tasks.addTask(9, new EntityAIWanderAvoidWater(this, 0.6D));
		        this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
		        this.tasks.addTask(11, new EntityAILookIdle(this));
		        
		        this.targetTasks.addTask(0, new EntityAINearestAttackableTarget(this, EntityLiving.class, 1, true, true, new Predicate<EntityLiving>()
		        {
		            public boolean apply(@Nullable EntityLiving p_apply_1_)
		            {
		        		return p_apply_1_ != null && (IMob.VISIBLE_MOB_SELECTOR.apply(p_apply_1_) && !(p_apply_1_ instanceof EntityCreeper) && !(p_apply_1_ instanceof EntityTameable) && !(p_apply_1_ instanceof EntitySkeletonMinion));
		            }
		        }));
		        this.targetTasks.addTask(1, new EntityAIAttackBackExclude(this, true, new Class[0])); 
			}
			break;
			case AttributeVocation.CLASS_MAGE:
			{
				this.tasks.addTask(0, new EntityAISwimming(this));
		        this.tasks.addTask(1, spells);
		        this.tasks.addTask(2, new EntityAIStayInBorders(this, 1.0D));
		        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(4, new EntityAIRestrictOpenDoor(this));
		        this.tasks.addTask(5, new EntityAIOpenDoor(this, true));
		       // this.tasks.addTask(6, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(7, new EntityAIHideFromHarm(this));
		        this.tasks.addTask(8, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
		        this.tasks.addTask(9, new EntityAIWanderAvoidWater(this, 0.6D));
		        this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
		        this.tasks.addTask(11, new EntityAILookIdle(this));
		        
		        this.targetTasks.addTask(0, new EntityAINearestAttackableTarget(this, EntityLiving.class, 1, true, true, new Predicate<EntityLiving>()
		        {
		            public boolean apply(@Nullable EntityLiving p_apply_1_)
		            {
		        		return p_apply_1_ != null && (IMob.VISIBLE_MOB_SELECTOR.apply(p_apply_1_) && !(p_apply_1_ instanceof EntityCreeper) && !(p_apply_1_ instanceof EntityTameable) && !(p_apply_1_ instanceof EntitySkeletonMinion));
		            }
		        }));
		        this.targetTasks.addTask(1, new EntityAIAttackBackExclude(this, true, new Class[0])); 
			}
			break;
			case AttributeVocation.CLASS_ALCHEMIST:
			{
				this.tasks.addTask(0, new EntityAISwimming(this));
		        this.tasks.addTask(1, potions);
		       // this.tasks.addTask(2, heal);
		        this.tasks.addTask(3, new EntityAIStayInBorders(this, 1.0D));
		        this.tasks.addTask(4, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(5, new EntityAIRestrictOpenDoor(this));
		        this.tasks.addTask(6, new EntityAIOpenDoor(this, true));
		        //this.tasks.addTask(7, new EntityAIMoveThroughVillage(this, 0.6D, true));
		        this.tasks.addTask(8, new EntityAIHideFromHarm(this));
		        this.tasks.addTask(9, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
		        this.tasks.addTask(10, new EntityAIWanderAvoidWater(this, 0.6D));
		        this.tasks.addTask(11, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
		        this.tasks.addTask(12, new EntityAILookIdle(this));
		        
		        this.targetTasks.addTask(0, new EntityAINearestAttackableTarget(this, EntityLiving.class, 1, true, true, new Predicate<EntityLiving>()
		        {
		            public boolean apply(@Nullable EntityLiving p_apply_1_)
		            {
		        		return p_apply_1_ != null && (IMob.VISIBLE_MOB_SELECTOR.apply(p_apply_1_) && !(p_apply_1_ instanceof EntityCreeper) && !(p_apply_1_ instanceof EntityTameable) && !(p_apply_1_ instanceof EntitySkeletonMinion));
		            }
		        }));
		        this.targetTasks.addTask(1, new EntityAIAttackBackExclude(this, true, new Class[0])); 
			}
			break;
			case AttributeVocation.CLASS_VILLAGER:
			{
				this.tasks.addTask(0, new EntityAISwimming(this));
		        this.tasks.addTask(1, melee);
		        this.tasks.addTask(1, new EntityAIAvoidEntity(this, EntityZombie.class, 8.0F, 0.6D, 0.6D));
		        this.tasks.addTask(1, new EntityAIAvoidEntity(this, EntityEvoker.class, 12.0F, 0.8D, 0.8D));
		        this.tasks.addTask(1, new EntityAIAvoidEntity(this, EntityVindicator.class, 8.0F, 0.8D, 0.8D));
		        this.tasks.addTask(1, new EntityAIAvoidEntity(this, EntityVex.class, 8.0F, 0.6D, 0.6D));
		        this.tasks.addTask(1, new EntityAITradePlayer(this));
		        this.tasks.addTask(1, new EntityAILookAtTradePlayer(this));
		        this.tasks.addTask(2, new EntityAIMoveIndoors(this));
		        this.tasks.addTask(3, new EntityAIRestrictOpenDoor(this));
		        this.tasks.addTask(4, new EntityAIOpenDoor(this, true));
		        this.tasks.addTask(5, new EntityAIMoveTowardsRestriction(this, 0.6D));
		        this.tasks.addTask(6, new EntityAIVillagerMate(this));
		        this.tasks.addTask(7, new EntityAIFollowGolem(this));
		        this.tasks.addTask(9, new EntityAIWatchClosest2(this, EntityPlayer.class, 3.0F, 1.0F));
		        this.tasks.addTask(9, new EntityAIVillagerInteract(this));
		        this.tasks.addTask(9, new EntityAIWanderAvoidWater(this, 0.6D));
		        this.tasks.addTask(10, new EntityAIWatchClosest(this, EntityLiving.class, 8.0F));

		        this.targetTasks.addTask(1, new EntityAIAttackBackExclude(this, true, new Class[0])); 
			}
			break;
		}
	}
	
	@Override
	public void readEntityFromNBT(NBTTagCompound compound)
	{
		super.readEntityFromNBT(compound);
	}
	
	@Override
	public void writeEntityToNBT(NBTTagCompound compound)
	{
		super.writeEntityToNBT(compound);
	}
	
	@Override
	protected void entityInit()
	{
		super.entityInit();
	}
	
	public void initVocation(int type, int id)
	{
		switch(type)
		{
			case AttributeVocation.CLASS_SOLDIER:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_ARCHER:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_MAGE:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_ALCHEMIST:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_VILLAGER:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
		}
	}
	
	protected void initEntityCharacteristics() {
		if(!world.isRemote)
		{
			this.generateName(rand);
		}
	}
	
	protected void initEntityName()
	{
		this.setCustomNameTag(this.getTitle());
		this.setAlwaysRenderNameTag(Main.useNametags);
	}
	
	
	protected void applyNewAI()
	{
		
	}
	
	protected void applyEquipment()
	{
		if(vocation == null) return;
		
		this.setHeldItem(EnumHand.MAIN_HAND, new ItemStack(vocation.getWeapon()));
		this.setHeldItem(EnumHand.OFF_HAND, new ItemStack(vocation.getShield()));
		
		this.setItemStackToSlot(EntityEquipmentSlot.HEAD, new ItemStack(vocation.getHelmet()));
		this.setItemStackToSlot(EntityEquipmentSlot.CHEST, new ItemStack(vocation.getChestplate()));
		this.setItemStackToSlot(EntityEquipmentSlot.LEGS, new ItemStack(vocation.getLeggings()));
		this.setItemStackToSlot(EntityEquipmentSlot.FEET, new ItemStack(vocation.getBoots()));
		
		//System.out.println(this.getHeldItem(EnumHand.MAIN_HAND).getDisplayName()+" "+vocation.getWeapon().getUnlocalizedName());
	}
	
	protected void applyEntityAttributes()
    {
        super.applyEntityAttributes();

        getAttributeMap().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE);
    }
	
	private void initEntityClass() 
	{
		this.vocation = race.getRecruitVocation(AttributeVocation.CLASS_SOLDIER);		
		
		System.out.println("Gender: "+this.gender);
		
		if(this.gender == GENDER_MALE) skin = race.getRandomSkinM();
		else skin = race.getRandomSkinF();
	}
	
	@Override
	public void attackEntityWithRangedAttack(EntityLivingBase target, float distanceFactor) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setSwingingArms(boolean swingingArms) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setMaster(AbstractVillagerSoldier villager) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isShouldFollow() {
		// TODO Auto-generated method stub
		return false;
	}
	
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

    protected void generateName(Random rand)
    {
    	this.firstName = NameGenerator.generateRandomName(rand, race, gender);
    	this.lastName = NameGenerator.generateRandomName(rand, race);
    }
    
    protected String getTitle()
    {
    	return this.firstName+" - "+this.race.getName()+" "+this.vocation.getName();
    }
    
    public String getFullName()
    {
    	return this.firstName+" "+this.lastName;
    }
    
    public AttributeVocation getVocation()
    {
    	return this.vocation;
    }
    
    public AttributeRace getRace()
    {
    	return this.race;
    }

	public ResourceLocation getResourceLocation() {
		return this.skin;
	}
	
	public EntityVillager getLiving()
	{
		return (EntityVillager)this;
	}
	
	public Village getVillage() {
		// TODO Auto-generated method stub
		return this.village;
	}

}
