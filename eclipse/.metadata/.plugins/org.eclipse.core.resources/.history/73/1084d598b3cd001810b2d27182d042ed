package net.theexceptionist.coherentvillages.main.entity;

import java.util.Random;

import javax.annotation.Nullable;

import com.google.common.base.Predicate;

import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.IRangedAttackMob;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAIAttackMelee;
import net.minecraft.entity.ai.EntityAILookIdle;
import net.minecraft.entity.ai.EntityAIMoveThroughVillage;
import net.minecraft.entity.ai.EntityAIMoveTowardsTarget;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAIOpenDoor;
import net.minecraft.entity.ai.EntityAIRestrictOpenDoor;
import net.minecraft.entity.ai.EntityAISwimming;
import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
import net.minecraft.entity.ai.EntityAIWatchClosest;
import net.minecraft.entity.monster.EntityCreeper;
import net.minecraft.entity.monster.IMob;
import net.minecraft.entity.passive.EntityTameable;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.EntityEquipmentSlot;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.EnumHand;
import net.minecraft.util.ResourceLocation;
import net.minecraft.village.Village;
import net.minecraft.world.World;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIAttackBackExclude;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIHideFromHarm;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIRest;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIStayInBorders;
import net.theexceptionist.coherentvillages.entity.followers.EntitySkeletonMinion;
import net.theexceptionist.coherentvillages.entity.followers.IEntityFollower;
import net.theexceptionist.coherentvillages.entity.soldier.AbstractVillagerSoldier;
import net.theexceptionist.coherentvillages.main.Main;
import net.theexceptionist.coherentvillages.main.NameGenerator;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeFaction;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeRace;
import net.theexceptionist.coherentvillages.main.entity.attributes.AttributeVocation;

public class EntityHumanVillager extends EntityVillager implements IEntityFollower, IEntityVillager, IRangedAttackMob{
	protected String firstName, lastName;
	protected int gender = -1;
	protected AttributeRace race;
	protected AttributeFaction faction;
	protected AttributeVocation vocation;
	private ResourceLocation skin;
	
	private EntityAIAttackMelee melee;
	
	public final static int GENDER_MALE = 0;
	public final static int GENDER_FEMALE = 1;
	
	public static int END_ID = 0;

	public EntityHumanVillager(World worldIn) {
		this(worldIn, END_ID++);
	}
	
	public EntityHumanVillager(World worldIn, final int ID)
	{
		super(worldIn);
		
		this.race = AttributeRace.getFromIDRace((ID/2) % AttributeRace.races.size());
		this.gender = (ID/2) % (GENDER_FEMALE + 1);

		this.initEntityClass();
		this.initEntityCharacteristics();
		this.initEntityAI();
		this.applyEquipment();
		
		this.initEntityName();
	}
	
	@Override
	protected void initEntityAI()
	{
		melee = new EntityAIAttackMelee(this, 1.0D, true);
		ranged = new 
		switch(vocation.getType())
		{
			case AttributeVocation.CLASS_SOLDIER:
			{
				this.tasks.addTask(0, new EntityAISwimming(this));
		        this.tasks.addTask(1, melee);
		        this.tasks.addTask(2, new EntityAIStayInBorders(this, 1.0D));
		        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6D, true));
				
		        //this.tasks.addTask(3, new EntityAIRest(this, true));
		        this.tasks.addTask(4, new EntityAIRestrictOpenDoor(this));
		        this.tasks.addTask(5, new EntityAIOpenDoor(this, true));
		        this.tasks.addTask(6, new EntityAIHideFromHarm(this));
		        this.tasks.addTask(7, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
		        this.tasks.addTask(8, new EntityAIWanderAvoidWater(this, 0.6D));
		        this.tasks.addTask(9, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
		        this.tasks.addTask(10, new EntityAILookIdle(this));
		        
		        this.targetTasks.addTask(0, new EntityAINearestAttackableTarget(this, EntityLiving.class, 1, true, true, new Predicate<EntityLiving>()
		        {
		            public boolean apply(@Nullable EntityLiving p_apply_1_)
		            {
		            	int faction = getFaction();
		            	
		            	if(p_apply_1_ instanceof AbstractVillagerSoldier)
		            	{
		            		AbstractVillagerSoldier soldier = (AbstractVillagerSoldier) p_apply_1_;
		            		int soldierFaction = soldier.getFaction();
		            		
		            	//	System.out.println(getCustomNameTag()+" - "+faction+" | "+soldier.getCustomNameTag()+" - "+soldierFaction);
		            		
		            		if(faction != soldierFaction)
		            		{
		            			//System.out.println("True");
		            			return true;
		            		}
		            		else if(faction == soldierFaction)
		            		{
		            			//System.out.println("False");
		            			return false;
		            		}
		            		else
		            		{
		            			//System.out.println("False2");
		            			return false;
		            		}
		            	}
		            	
		            	if(p_apply_1_ instanceof EntityVillager && !(p_apply_1_ instanceof AbstractVillagerSoldier) && faction == Main.BANDIT_FACTION)
		            	{
		            		return true;
		            	}
		            	//ystem.out.println(getCustomNameTag()+" - "+getFaction());
		        		return p_apply_1_ != null && (IMob.VISIBLE_MOB_SELECTOR.apply(p_apply_1_) && !(p_apply_1_ instanceof EntityCreeper) && !(p_apply_1_ instanceof EntityTameable) && !(p_apply_1_ instanceof EntitySkeletonMinion));
		            }
		        }));
		        this.targetTasks.addTask(1, new EntityAIAttackBackExclude(this, true, new Class[0])); 
			}
			break;
			case AttributeVocation.CLASS_ARCHER:
			{
				
			}
			break;
			case AttributeVocation.CLASS_MAGE:
			{
				
			}
			break;
			case AttributeVocation.CLASS_ALCHEMIST:
			{
				
			}
			break;
			case AttributeVocation.CLASS_VILLAGER:
			{
				
			}
			break;
		}
	}
	
	@Override
	public void readEntityFromNBT(NBTTagCompound compound)
	{
		super.readEntityFromNBT(compound);
	}
	
	@Override
	public void writeEntityToNBT(NBTTagCompound compound)
	{
		super.writeEntityToNBT(compound);
	}
	
	@Override
	protected void entityInit()
	{
		super.entityInit();
	}
	
	public void initVocation(int type, int id)
	{
		switch(type)
		{
			case AttributeVocation.CLASS_SOLDIER:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_ARCHER:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_MAGE:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_ALCHEMIST:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
			case AttributeVocation.CLASS_VILLAGER:
			{
				this.vocation = race.getVocation(type, id);
			}
			break;
		}
	}
	
	protected void initEntityCharacteristics() {
		if(!world.isRemote)
		{
			this.generateName(rand);
		}
	}
	
	protected void initEntityName()
	{
		this.setCustomNameTag(this.getTitle());
		this.setAlwaysRenderNameTag(Main.useNametags);
	}
	
	
	protected void applyNewAI()
	{
		
	}
	
	protected void applyEquipment()
	{
		if(vocation == null) return;
		
		this.setHeldItem(EnumHand.MAIN_HAND, new ItemStack(vocation.getWeapon()));
		this.setHeldItem(EnumHand.OFF_HAND, new ItemStack(vocation.getShield()));
		
		this.setItemStackToSlot(EntityEquipmentSlot.HEAD, new ItemStack(vocation.getHelmet()));
		this.setItemStackToSlot(EntityEquipmentSlot.CHEST, new ItemStack(vocation.getChestplate()));
		this.setItemStackToSlot(EntityEquipmentSlot.LEGS, new ItemStack(vocation.getLeggings()));
		this.setItemStackToSlot(EntityEquipmentSlot.FEET, new ItemStack(vocation.getBoots()));
		
		//System.out.println(this.getHeldItem(EnumHand.MAIN_HAND).getDisplayName()+" "+vocation.getWeapon().getUnlocalizedName());
	}
	
	protected void applyEntityAttributes()
    {
        super.applyEntityAttributes();

        getAttributeMap().registerAttribute(SharedMonsterAttributes.ATTACK_DAMAGE);
    }
	
	private void initEntityClass() 
	{
		this.vocation = race.getRecruitVocation(AttributeVocation.CLASS_SOLDIER);		
		
		System.out.println("Gender: "+this.gender);
		
		if(this.gender == GENDER_MALE) skin = race.getRandomSkinM();
		else skin = race.getRandomSkinF();
	}
	
	@Override
	public void attackEntityWithRangedAttack(EntityLivingBase target, float distanceFactor) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setSwingingArms(boolean swingingArms) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void setMaster(AbstractVillagerSoldier villager) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean isShouldFollow() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public EntityLiving getLiving() {
		// TODO Auto-generated method stub
		return null;
	}
	
	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

    protected void generateName(Random rand)
    {
    	this.firstName = NameGenerator.generateRandomName(rand, race, gender);
    	this.lastName = NameGenerator.generateRandomName(rand, race);
    }
    
    protected String getTitle()
    {
    	return this.firstName+" - "+this.race.getName()+" "+this.vocation.getName();
    }
    
    public String getFullName()
    {
    	return this.firstName+" "+this.lastName;
    }
    
    public AttributeVocation getVocation()
    {
    	return this.vocation;
    }
    
    public AttributeRace getRace()
    {
    	return this.race;
    }

	public ResourceLocation getResourceLocation() {
		return this.skin;
	}
	
	public EntityVillager getLiving()
	{
		return (EntityVillager)this;
	}
	
	public Village getVillage()
	{
		
	}

}
