package net.theexceptionist.coherentvillages.entity;

import java.util.List;

import javax.annotation.Nullable;

import com.google.common.base.Predicate;
//import net.theexceptionist.main.entity.ai.EntityAIRoutedPatrol;

import net.minecraft.entity.EntityLiving;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.IRangedAttackMob;
import net.minecraft.entity.SharedMonsterAttributes;
import net.minecraft.entity.ai.EntityAILookIdle;
import net.minecraft.entity.ai.EntityAIMoveThroughVillage;
import net.minecraft.entity.ai.EntityAIMoveTowardsRestriction;
import net.minecraft.entity.ai.EntityAINearestAttackableTarget;
import net.minecraft.entity.ai.EntityAIOpenDoor;
import net.minecraft.entity.ai.EntityAIRestrictOpenDoor;
import net.minecraft.entity.ai.EntityAISwimming;
import net.minecraft.entity.ai.EntityAIWanderAvoidWater;
import net.minecraft.entity.ai.EntityAIWatchClosest;
import net.minecraft.entity.monster.EntityCreeper;
import net.minecraft.entity.monster.IMob;
import net.minecraft.entity.passive.EntityVillager;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.projectile.EntityLargeFireball;
import net.minecraft.init.Items;
import net.minecraft.init.SoundEvents;
import net.minecraft.inventory.EntityEquipmentSlot;
import net.minecraft.item.ItemStack;
import net.minecraft.util.EntitySelectors;
import net.minecraft.util.EnumHand;
import net.minecraft.util.SoundCategory;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.World;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIAttackBackExclude;
import net.theexceptionist.coherentvillages.entity.ai.EntityAIAttackWithMagic;

public class EntityVillagerEvilMage extends EntityVillagerSoldier implements IRangedAttackMob{
	private int armour = 2, attack = 8;
	public EntityVillagerEvilMage(World worldIn) {
		super(worldIn);
	}
	
	protected void initEntityAI()
    {
		//this.setHeldItem(EnumHand.MAIN_HAND, new ItemStack(Items.BOW));
		this.setItemStackToSlot(EntityEquipmentSlot.HEAD, new ItemStack(Items.IRON_HELMET));
		this.setItemStackToSlot(EntityEquipmentSlot.CHEST, new ItemStack(Items.IRON_CHESTPLATE));
		//this.areAdditionalTasksSet = true;
		
		this.tasks.addTask(0, new EntityAISwimming(this));
        this.tasks.addTask(1, new  EntityAIAttackWithMagic(this, 1.0D, 20, 15.0F));
        //this.tasks.addTask(2, new EntityAIMoveIndoors(this));
        this.tasks.addTask(3, new EntityAIRestrictOpenDoor(this));
        this.tasks.addTask(4, new EntityAIOpenDoor(this, true));
    //    this.tasks.addTask(2, new EntityAIMoveTowardsTarget(this, 0.9D, 32.0F));
        this.tasks.addTask(3, new EntityAIMoveThroughVillage(this, 0.6D, true));
        this.tasks.addTask(4, new EntityAIMoveTowardsRestriction(this, 1.0D));
        //this.tasks.addTask(5, new EntityAILookAtVillager(this));
        this.tasks.addTask(6, new EntityAIWanderAvoidWater(this, 0.6D));
        this.tasks.addTask(7, new EntityAIWatchClosest(this, EntityPlayer.class, 6.0F));
        this.tasks.addTask(8, new EntityAILookIdle(this));
       // this.tasks.addTask(6, new EntityAIHarvestFarmland(this, 0.6D));
        //this.areAdditionalTasksSet = true;
        
        
       // this.targetTasks.addTask(1, new EntityAIGuardPost(this, true));
        this.targetTasks.addTask(1, new EntityAINearestAttackableTarget(this, EntityLiving.class, 2, false, true, new Predicate<EntityLiving>()
        {
            public boolean apply(@Nullable EntityLiving p_apply_1_)
            {
                return p_apply_1_ != null && IMob.VISIBLE_MOB_SELECTOR.apply(p_apply_1_) && !(p_apply_1_ instanceof EntityCreeper);
            }
        }));
        this.targetTasks.addTask(0, new EntityAIAttackBackExclude(this, false, new Class[0]));
    }
	
	protected void applyEntityAttributes()
    {
        super.applyEntityAttributes();
        this.getEntityAttribute(SharedMonsterAttributes.MOVEMENT_SPEED).setBaseValue(0.4D);
        this.getEntityAttribute(SharedMonsterAttributes.MAX_HEALTH).setBaseValue(60.0D);
        this.setProfession(1);
        
        //this.setHeldItem(EnumHand.MAIN_HAND, null);
        
//        EntityHorse horse = new EntityHorse(this.world);
//        setPosition(this.posX, this.posY, this.posZ);
//        this.world.spawnEntity(horse);
//        this.startRiding(horse);
    }
	
	@Override
	 protected void updateAITasks()
	    {
		
		 super.updateAITasks();
		 if(this.getAttackTarget() instanceof EntityVillager){
			 this.setAttackTarget(null);
		 }
	    }

	private int coolDown = 0;
	@Override
	public void attackEntityWithRangedAttack(EntityLivingBase target,
			float distanceFactor) {
		if(!this.world.isRemote){
			List currentSpawns = this.world.getEntities(EntityVillagerGuardian.class, EntitySelectors.IS_ALIVE);
			
			if(coolDown > 0)
			{
				coolDown--;
			}
			
			if(this.world.rand.nextInt(100) <= 80 && coolDown <= 0){
				
				this.world.addWeatherEffect(new EntityVillagerLighting(this.world, target.posX, target.posY, target.posZ, true));
				coolDown = 3;
			} else if (this.world.rand.nextInt(100) <= 40) {
				boolean cont = true;
				for(int i = 0; i < currentSpawns.size(); i++){
					EntityVillagerGuardian g = (EntityVillagerGuardian) currentSpawns.get(i);
					
					if(g.getMaster() == this){
						cont = false;
					}
				}
				
				if(cont){
				      this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_GHAST_SCREAM, SoundCategory.NEUTRAL, 2.0F, 0.5F + this.rand.nextFloat() * 0.2F);
				       
					int amount = 1 + this.world.rand.nextInt(4);
					BlockPos spawn = new BlockPos(this.posX, this.posY, this.posZ);
					for(int i =0; i < amount; i++){
						EntityVillagerGuardian entityvillager = new EntityVillagerGuardian(this.world);
			            entityvillager.setLocationAndAngles(spawn.getX() + rand.nextInt(5),spawn.getY()  + rand.nextInt(5),spawn.getZ()  + rand.nextInt(5), 0.0F, 0.0F);
			            //entityvillager.setSpawnPoint(spawn.getX()  + rand.nextInt(5),spawn.getY()  + rand.nextInt(5),spawn.getZ()  + rand.nextInt(5));
			            //entityvillager.setProfession(null); 
			            entityvillager.setMaster(this);
			            
			            //entityvillager.finalizeMobSpawn(this.world.getDifficultyForLocation(new BlockPos(entityvillager)), (IEntityLivingData)null, false);
			            this.world.spawnEntity(entityvillager);
					}
				}
				else if(this.world.rand.nextInt(100) <= 40)
				{
					 double d1 = 4.0D;
                     Vec3d vec3d = this.getLook(1.0F);
                     EntityLivingBase entitylivingbase = this.getAttackTarget();
                     
                     double d2 = entitylivingbase.posX - (this.posX + vec3d.x * 4.0D);
                     double d3 = entitylivingbase.getEntityBoundingBox().minY + (double)(entitylivingbase.height / 2.0F) - (0.5D + this.posY + (double)(this.height / 2.0F));
                     double d4 = entitylivingbase.posZ - (this.posZ + vec3d.z * 4.0D);
                     
                     this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.BLOCK_FIRE_AMBIENT, SoundCategory.NEUTRAL, 2.0F, 0.5F + this.rand.nextFloat() * 0.2F);
				       
                     EntityLargeFireball entitylargefireball = new EntityLargeFireball(world, this, d2, d3, d4);
                     entitylargefireball.explosionPower = 0;
                     entitylargefireball.posX = this.posX + vec3d.x * 4.0D;
                     entitylargefireball.posY = this.posY + (double)(this.height / 2.0F) + 0.5D;
                     entitylargefireball.posZ = this.posZ + vec3d.z * 4.0D;
                     world.spawnEntity(entitylargefireball);
				}
				else{
				      this.world.playSound((EntityPlayer)null, this.posX, this.posY, this.posZ, SoundEvents.ENTITY_GENERIC_EXTINGUISH_FIRE, SoundCategory.NEUTRAL, 2.0F, 0.5F + this.rand.nextFloat() * 0.2F);
				       
				}
			}
		}
	}

	@Override
	public void setSwingingArms(boolean swingingArms) {
		// TODO Auto-generated method stub
		
	}
	

}
