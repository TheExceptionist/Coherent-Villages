package net.theexceptionist.coherentvillages.worldgen;

import java.util.List;
import java.util.Random;

import net.minecraft.block.BlockStone;
import net.minecraft.block.state.IBlockState;
import net.minecraft.entity.IEntityLivingData;
import net.minecraft.init.Blocks;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraft.world.gen.structure.StructureBoundingBox;
import net.minecraft.world.gen.structure.StructureComponent;
import net.minecraft.world.gen.structure.StructureVillagePieces;
import net.theexceptionist.coherentvillages.entity.mage.AbstractVillagerMage;
import net.theexceptionist.coherentvillages.entity.mage.EntityVillagerConjurer;
import net.theexceptionist.coherentvillages.entity.mage.EntityVillagerGrandMage;
import net.theexceptionist.coherentvillages.entity.mage.EntityVillagerMage;
import net.theexceptionist.coherentvillages.entity.mage.EntityVillagerNecromancer;

public class VillageComponentWizardTower extends StructureVillagePieces.Village
    {
    private boolean isRoofAccessible;
	private int villagersSpawned;

    public VillageComponentWizardTower()
    {
    }

    public VillageComponentWizardTower(StructureVillagePieces.Start start, int p_i45566_2_, Random rand, StructureBoundingBox p_i45566_4_, EnumFacing facing)
    {
        super(start, p_i45566_2_);
        this.setCoordBaseMode(facing);
        this.boundingBox = p_i45566_4_;
        this.isRoofAccessible = rand.nextBoolean();
    }

    public static VillageComponentWizardTower createPiece(StructureVillagePieces.Start start, List<StructureComponent> p_175858_1_, Random rand, int p_175858_3_, int p_175858_4_, int p_175858_5_, EnumFacing facing, int p_175858_7_)
    {
    	StructureBoundingBox structureboundingbox = StructureBoundingBox.getComponentToAddBoundingBox(p_175858_3_, p_175858_4_, p_175858_5_, 0, 0, 0, 7, 12, 7, facing);
        return StructureComponent.findIntersecting(p_175858_1_, structureboundingbox) != null ? null : new VillageComponentWizardTower(start, p_175858_7_, rand, structureboundingbox, facing);
    }

    /**
     * second Part of Structure generating, this for example places Spiderwebs, Mob Spawners, it closes
     * Mineshafts at the end, it adds Fences...
     */
    public boolean addComponentParts(World worldIn, Random randomIn, StructureBoundingBox structureBoundingBoxIn)
    {
    	//System.out.println("Generating");
    	if (this.averageGroundLvl < 0)
        {
            this.averageGroundLvl = this.getAverageGroundLevel(worldIn, structureBoundingBoxIn);

            if (this.averageGroundLvl < 0)
            {
                return true;
            }

            this.boundingBox.offset(0, this.averageGroundLvl - this.boundingBox.maxY + 12 - 1, 0);
        }

        IBlockState iblockstate = this.getBiomeSpecificBlockState(Blocks.COBBLESTONE.getDefaultState());
        
        IBlockState iblockstate1 = this.getBiomeSpecificBlockState(Blocks.STONE.getDefaultState().withProperty(BlockStone.VARIANT, BlockStone.EnumType.ANDESITE_SMOOTH));
        IBlockState iblockstate2 = this.getBiomeSpecificBlockState(Blocks.STONE.getDefaultState().withProperty(BlockStone.VARIANT, BlockStone.EnumType.DIORITE_SMOOTH));
        IBlockState iblockstate3 = this.getBiomeSpecificBlockState(Blocks.STONE.getDefaultState().withProperty(BlockStone.VARIANT, BlockStone.EnumType.GRANITE_SMOOTH));
        
        
        /*IBlockState iblockstate1 = this.getBiomeSpecificBlockState(Blocks.PLANKS.getDefaultState());
        IBlockState iblockstate2 = this.getBiomeSpecificBlockState(Blocks.OAK_STAIRS.getDefaultState().withProperty(BlockStairs.FACING, EnumFacing.NORTH));
        IBlockState iblockstate3 = this.getBiomeSpecificBlockState(Blocks.LOG.getDefaultState());*/
        IBlockState iblockstate4 = this.getBiomeSpecificBlockState(Blocks.OAK_FENCE.getDefaultState());
        
        if(worldIn.rand.nextBoolean())
        {
        	iblockstate4 = this.getBiomeSpecificBlockState(Blocks.AIR.getDefaultState());
        }
        
        IBlockState iblockstate5 = this.getBiomeSpecificBlockState(Blocks.DOUBLE_STONE_SLAB.getDefaultState());
        IBlockState iblockstate6 = this.getBiomeSpecificBlockState(Blocks.STONEBRICK.getDefaultState());
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 0, 0, 11, 0,iblockstate2, iblockstate2, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 0, 0, 6, 11, 0,iblockstate2, iblockstate2, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 6, 6, 11, 6,iblockstate2, iblockstate2, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 0, 6, 6, 11, 6,iblockstate2, iblockstate2, false);
        
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 0, 0, 5, 11, 0,iblockstate1, iblockstate1, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 1, 0, 11, 5,iblockstate1, iblockstate1, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 0, 6, 5, 11, 6,iblockstate1, iblockstate1, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 0, 1, 6, 11, 5, iblockstate1, iblockstate1, false);
       
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 12, 0, 6, 12, 6, iblockstate3, iblockstate3, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, -1, 0, 6, -1, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 12, 1, 5, 12, 5, Blocks.AIR.getDefaultState(), Blocks.AIR.getDefaultState(), false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 3, 8, 0, 3, 10, 0, iblockstate4, iblockstate4, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 3, 3, 0, 3, 5, 0, iblockstate4, iblockstate4, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 8, 3, 0, 10, 3, iblockstate4, iblockstate4, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 3, 3, 0, 5,  3, iblockstate4, iblockstate4, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 3, 8, 6, 3, 10, 6, iblockstate4, iblockstate4, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 3, 3, 6, 3, 5,  6, iblockstate4, iblockstate4, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 8, 3, 6, 10, 3, iblockstate4, iblockstate4, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 3, 3, 6, 5,  3, iblockstate4, iblockstate4, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 6, 1, 5, 6, 5, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 11, 1, 5, 11, 5, iblockstate6, iblockstate6, false);
        
        this.setBlockState(worldIn, Blocks.AIR.getDefaultState(), 5, 6, 5, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.AIR.getDefaultState(), 5, 11, 5, structureBoundingBoxIn);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 5, 0, 5, 5, 11, 5, Blocks.LADDER.getDefaultState(), Blocks.LADDER.getDefaultState(), false);
       
        this.createVillageDoor(worldIn, structureBoundingBoxIn, randomIn, 3, 0, 0, EnumFacing.NORTH);
        this.placeTorch(worldIn, EnumFacing.SOUTH, 3, 2, -1, structureBoundingBoxIn);
              
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 2, 11, 2, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 2, 11, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 2, 11, 4, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 3, 11, 2, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 3, 11, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 3, 11, 4, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 4, 11, 2, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 4, 11, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn, Blocks.IRON_BLOCK.getDefaultState(), 4, 11, 4, structureBoundingBoxIn);
        
        this.setBlockState(worldIn, Blocks.BEACON.getDefaultState(), 3, 12, 3, structureBoundingBoxIn);
        
        /*
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 0, 6, 0, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 4, 1, 6, 4, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 10, 1, 6, 10, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 16, 1, 6, 16, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 21, 1, 6, 21, 6, iblockstate6, iblockstate6, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 22, 0, 6, 22, 6, iblockstate3, iblockstate3, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 22, 1, 6, 22, 6, Blocks.AIR.getDefaultState(),  Blocks.AIR.getDefaultState(), false);
        */
        
        /*this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 0, 0, 21, 0,iblockstate2, iblockstate2, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 0, 0, 6, 21, 0,iblockstate2, iblockstate2, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 6, 0, 21, 6,iblockstate2, iblockstate2, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 0, 6, 6, 21, 6,iblockstate2, iblockstate2, false);
        
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 0, 0, 6, 21, 0,iblockstate1, iblockstate1, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 1, 0, 21, 6,iblockstate1, iblockstate1, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 0, 6, 1, 21, 6,iblockstate1, iblockstate1, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 6, 0, 1, 6, 21, 6, iblockstate1, iblockstate1, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 0, 0, 6, 0, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 4, 1, 6, 4, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 10, 1, 6, 10, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 16, 1, 6, 16, 6, iblockstate6, iblockstate6, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 21, 1, 6, 21, 6, iblockstate6, iblockstate6, false);
        
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 0, 22, 0, 6, 22, 6, iblockstate3, iblockstate3, false);
        this.fillWithBlocks(worldIn, structureBoundingBoxIn, 1, 22, 1, 6, 22, 6, Blocks.AIR.getDefaultState(),  Blocks.AIR.getDefaultState(), false);
        
        --------------------
        this.setBlockState(worldIn,iblockstate3, 0, 23, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 1, 23, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 0, 23, 1, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate3, 6, 23, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 6, 23, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 0, 23, 6, structureBoundingBoxIn);
   
        this.setBlockState(worldIn,iblockstate3, 0, 23, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 1, 23, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 0, 23, 6, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate3, 6, 23, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 6, 23, 1, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 6, 23, 0, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate3, 0, 24, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 6, 24, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 0, 24, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate3, 6, 24, 6, structureBoundingBoxIn);
        
        this.createVillageDoor(worldIn, structureBoundingBoxIn, randomIn, 3, 0, 0, EnumFacing.NORTH);
        this.placeTorch(worldIn, EnumFacing.SOUTH, 3, 2, -1, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 3, 5, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 6, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 7, 0, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 3, 11, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 12, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 13, 0, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 3, 16, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 18, 0, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 19, 0, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 3, 5, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 6, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 7, 6, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 3, 11, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 12, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 13, 6, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 3, 17, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 18, 6, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 3, 19, 6, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 6, 5, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 6, 6, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 6, 7, 3, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 6, 11, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 6, 12, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 6, 13, 3, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 6, 17, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 6, 18, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 6, 19, 3, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 0, 5, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 0, 6, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 0, 7, 3, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 0, 11, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 0, 12, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 0, 13, 3, structureBoundingBoxIn);
        
        this.setBlockState(worldIn,iblockstate4, 0, 17, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 0, 18, 3, structureBoundingBoxIn);
        this.setBlockState(worldIn,iblockstate4, 0, 19, 3, structureBoundingBoxIn);*/
        
        
        for (int j = 0; j < 7; ++j)
        {
            for (int i = 0; i < 7; ++i)
            {
                this.clearCurrentPositionBlocksUpwards(worldIn, i, 13, j, structureBoundingBoxIn);
                this.replaceAirAndLiquidDownwards(worldIn, Blocks.PLANKS.getDefaultState(), i, -1, j, structureBoundingBoxIn);
            }
        }
        
        if(!worldIn.isRemote){
        	this.spawnVillagers(worldIn, structureBoundingBoxIn, 1, 1, 2, 1 + randomIn.nextInt(2));
        }
        return true;
    }
    
    protected void spawnVillagers(World worldIn, StructureBoundingBox structurebb, int x, int y, int z, int count)
    {
        if (this.villagersSpawned < count)
        {
            for (int i = villagersSpawned; i < count; ++i)
            {
                int j = this.getXWithOffset(x + i, z);
                int k = this.getYWithOffset(y);
                int l = this.getZWithOffset(x + i, z);

                if (!structurebb.isVecInside(new BlockPos(j, k, l)))
                {
                    break;
                }

                ++this.villagersSpawned;
                
               // if(worldIn.rand.nextInt(100) <= 20){
                	AbstractVillagerMage entityvillager3 = new EntityVillagerMage(worldIn);
                	
                	if(worldIn.rand.nextInt(100) <= 50) entityvillager3 = new EntityVillagerConjurer(worldIn);
                	else if(worldIn.rand.nextInt(100) <= 20) entityvillager3 = new EntityVillagerNecromancer(worldIn);
                	else if(worldIn.rand.nextInt(100) <= 20) entityvillager3 = new EntityVillagerGrandMage(worldIn);
                	
                	 if(entityvillager3.isCanSpawn())
                	 {
                		 entityvillager3.onInitialSpawn(worldIn.getDifficultyForLocation(new BlockPos(j, k, l)), null);
	                	entityvillager3.setLocationAndAngles((double)j + 0.5D, (double)k, (double)l + 0.5D, 0.0F, 0.0F);
	                    entityvillager3.setSpawnPoint((double)j + 0.5D, (double)k, (double)l + 0.5D);
	                    //entityvillager.setProfession(null);
	                    
	                    entityvillager3.finalizeMobSpawn(worldIn.getDifficultyForLocation(new BlockPos(entityvillager3)), (IEntityLivingData)null, false);
	                    worldIn.spawnEntity(entityvillager3);
                	 }
               // }
                    /*if(worldIn.rand.nextInt(100) <= 20){
                    	EntityVillagerMage entityvillager1 = new EntityVillagerMage(worldIn);
                    	entityvillager1.setLocationAndAngles((double)j + 0.5D, (double)k + 5D, (double)l + 0.5D, 0.0F, 0.0F);
                        entityvillager1.setSpawnPoint((double)j + 0.5D, (double)k + 5D, (double)l + 0.5D);
                      //  entityvillager1.setProfession(null);
                        
                        entityvillager1.finalizeMobSpawn(worldIn.getDifficultyForLocation(new BlockPos(entityvillager1)), (IEntityLivingData)null, false);
                        worldIn.spawnEntity(entityvillager1);
                    } 
                    	else
                    {
                    		EntityVillager entityvillager = new EntityVillager(worldIn);
                            entityvillager.setLocationAndAngles((double)j + 1.5D, (double)k + 5D, (double)l + 0.5D, 0.0F, 0.0F);
                            entityvillager.setProfession(5);                               
                            entityvillager.finalizeMobSpawn(worldIn.getDifficultyForLocation(new BlockPos(entityvillager)), (IEntityLivingData)null, false);
                            worldIn.spawnEntity(entityvillager);
                    }*/
                   
            }
        }
    }
}
